# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import typing
import platform

# Used for default argument values
_DEFAULT = object()


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_int32),
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def alloc(size):
        return _rust_call(_UniffiLib.ffi_restsend_sdk_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _rust_call(_UniffiLib.ffi_restsend_sdk_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _rust_call(_UniffiLib.ffi_restsend_sdk_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

    def read_c_size_t(self):
        return self._unpack_from(ctypes.sizeof(ctypes.c_size_t) , "@N")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_PANIC = 2

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_PANIC:
            return "_UniffiRustCallStatus(CALL_PANIC)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _rust_call(fn, *args):
    # Call a rust function
    return _rust_call_with_error(None, fn, *args)

def _rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer(0, 0, None))

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_PANIC:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

# A function pointer for a callback as defined by UniFFI.
# Rust definition `fn(handle: u64, method: u32, args: _UniffiRustBuffer, buf_ptr: *mut _UniffiRustBuffer) -> int`
_UNIFFI_FOREIGN_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_ulonglong, ctypes.c_ulong, ctypes.POINTER(ctypes.c_char), ctypes.c_int, ctypes.POINTER(_UniffiRustBuffer))

# UniFFI future continuation
_UNIFFI_FUTURE_CONTINUATION_T = ctypes.CFUNCTYPE(None, ctypes.c_size_t, ctypes.c_int8)
class _UniffiPointerManagerCPython:
    """
    Manage giving out pointers to Python objects on CPython

    This class is used to generate opaque pointers that reference Python objects to pass to Rust.
    It assumes a CPython platform.  See _UniffiPointerManagerGeneral for the alternative.
    """

    def new_pointer(self, obj):
        """
        Get a pointer for an object as a ctypes.c_size_t instance

        Each call to new_pointer() must be balanced with exactly one call to release_pointer()

        This returns a ctypes.c_size_t.  This is always the same size as a pointer and can be
        interchanged with pointers for FFI function arguments and return values.
        """
        # IncRef the object since we're going to pass a pointer to Rust
        ctypes.pythonapi.Py_IncRef(ctypes.py_object(obj))
        # id() is the object address on CPython
        # (https://docs.python.org/3/library/functions.html#id)
        return id(obj)

    def release_pointer(self, address):
        py_obj = ctypes.cast(address, ctypes.py_object)
        obj = py_obj.value
        ctypes.pythonapi.Py_DecRef(py_obj)
        return obj

    def lookup(self, address):
        return ctypes.cast(address, ctypes.py_object).value

class _UniffiPointerManagerGeneral:
    """
    Manage giving out pointers to Python objects on non-CPython platforms

    This has the same API as _UniffiPointerManagerCPython, but doesn't assume we're running on
    CPython and is slightly slower.

    Instead of using real pointers, it maps integer values to objects and returns the keys as
    c_size_t values.
    """

    def __init__(self):
        self._map = {}
        self._lock = threading.Lock()
        self._current_handle = 0

    def new_pointer(self, obj):
        with self._lock:
            handle = self._current_handle
            self._current_handle += 1
            self._map[handle] = obj
        return handle

    def release_pointer(self, handle):
        with self._lock:
            return self._map.pop(handle)

    def lookup(self, handle):
        with self._lock:
            return self._map[handle]

# Pick an pointer manager implementation based on the platform
if platform.python_implementation() == 'CPython':
    _UniffiPointerManager = _UniffiPointerManagerCPython # type: ignore
else:
    _UniffiPointerManager = _UniffiPointerManagerGeneral # type: ignore
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def check(cls, value):
        return value

    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return cls.lowerUnchecked(cls.check(value))

    @classmethod
    def lowerUnchecked(cls, value):
        return value

    @classmethod
    def write(cls, value, buf):
        cls.write_unchecked(cls.check(value), buf)

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))
        return super().check(value)

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))
        return super().check(value)

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
ctypes type for the foreign executor callback.  This is a built-in interface for scheduling
tasks

Args:
  executor: opaque c_size_t value representing the eventloop
  delay: delay in ms
  task: function pointer to the task callback
  task_data: void pointer to the task callback data

Normally we should call task(task_data) after the detail.
However, when task is NULL this indicates that Rust has dropped the ForeignExecutor and we should
decrease the EventLoop refcount.
"""
_UNIFFI_FOREIGN_EXECUTOR_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int8, ctypes.c_size_t, ctypes.c_uint32, ctypes.c_void_p, ctypes.c_void_p)

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_size_t, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("restsend_ffi")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 24
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_restsend_sdk_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    pass

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UniffiLib.ffi_restsend_sdk_rustbuffer_alloc.argtypes = (
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_restsend_sdk_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_restsend_sdk_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_restsend_sdk_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_restsend_sdk_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_restsend_sdk_rustbuffer_free.restype = None
_UniffiLib.ffi_restsend_sdk_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_restsend_sdk_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_restsend_sdk_rust_future_continuation_callback_set.argtypes = (
    _UNIFFI_FUTURE_CONTINUATION_T,
)
_UniffiLib.ffi_restsend_sdk_rust_future_continuation_callback_set.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_poll_u8.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_restsend_sdk_rust_future_poll_u8.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_u8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_free_u8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_free_u8.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_complete_u8.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_restsend_sdk_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_restsend_sdk_rust_future_poll_i8.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_restsend_sdk_rust_future_poll_i8.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_i8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_free_i8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_free_i8.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_complete_i8.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_restsend_sdk_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_restsend_sdk_rust_future_poll_u16.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_restsend_sdk_rust_future_poll_u16.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_u16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_free_u16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_free_u16.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_complete_u16.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_restsend_sdk_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_restsend_sdk_rust_future_poll_i16.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_restsend_sdk_rust_future_poll_i16.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_i16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_free_i16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_free_i16.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_complete_i16.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_restsend_sdk_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_restsend_sdk_rust_future_poll_u32.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_restsend_sdk_rust_future_poll_u32.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_u32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_free_u32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_free_u32.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_complete_u32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_restsend_sdk_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_restsend_sdk_rust_future_poll_i32.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_restsend_sdk_rust_future_poll_i32.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_i32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_free_i32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_free_i32.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_complete_i32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_restsend_sdk_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_restsend_sdk_rust_future_poll_u64.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_restsend_sdk_rust_future_poll_u64.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_u64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_free_u64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_free_u64.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_complete_u64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_restsend_sdk_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_restsend_sdk_rust_future_poll_i64.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_restsend_sdk_rust_future_poll_i64.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_i64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_free_i64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_free_i64.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_complete_i64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_restsend_sdk_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_restsend_sdk_rust_future_poll_f32.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_restsend_sdk_rust_future_poll_f32.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_f32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_free_f32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_free_f32.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_complete_f32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_restsend_sdk_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_restsend_sdk_rust_future_poll_f64.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_restsend_sdk_rust_future_poll_f64.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_f64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_free_f64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_free_f64.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_complete_f64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_restsend_sdk_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_restsend_sdk_rust_future_poll_pointer.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_restsend_sdk_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_pointer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_free_pointer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_free_pointer.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_complete_pointer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_restsend_sdk_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_restsend_sdk_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_restsend_sdk_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_restsend_sdk_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_restsend_sdk_rust_future_poll_void.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_restsend_sdk_rust_future_poll_void.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_void.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_cancel_void.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_free_void.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_restsend_sdk_rust_future_free_void.restype = None
_UniffiLib.ffi_restsend_sdk_rust_future_complete_void.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_restsend_sdk_rust_future_complete_void.restype = None
_UniffiLib.ffi_restsend_sdk_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_restsend_sdk_uniffi_contract_version.restype = ctypes.c_uint32
_uniffi_check_contract_api_version(_UniffiLib)
_uniffi_check_api_checksums(_UniffiLib)

# Async support

# Public interface members begin here.


class _UniffiConverterUInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u32"
    VALUE_MIN = 0
    VALUE_MAX = 2**32

    @staticmethod
    def read(buf):
        return buf.read_u32()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_u32(value)

class _UniffiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_u64(value)

class _UniffiConverterInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "i64"
    VALUE_MIN = -2**63
    VALUE_MAX = 2**63

    @staticmethod
    def read(buf):
        return buf.read_i64()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_i64(value)

class _UniffiConverterFloat(_UniffiConverterPrimitiveFloat):
    @staticmethod
    def read(buf):
        return buf.read_float()

    @staticmethod
    def write_unchecked(value, buf):
        buf.write_float(value)

class _UniffiConverterBool(_UniffiConverterPrimitive):
    @classmethod
    def check(cls, value):
        return not not value

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write_unchecked(cls, value, buf):
        buf.write_u8(value)

    @staticmethod
    def lift(value):
        return value != 0

class _UniffiConverterString:
    @staticmethod
    def check(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        value = _UniffiConverterString.check(value)
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        value = _UniffiConverterString.check(value)
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()


class Attachment:
    thumbnail: "str";file_name: "str";file_path: "str";url_or_data: "str";is_private: "bool";status: "AttachmentStatus";

    @typing.no_type_check
    def __init__(self, thumbnail: "str", file_name: "str", file_path: "str", url_or_data: "str", is_private: "bool", status: "AttachmentStatus"):
        self.thumbnail = thumbnail
        self.file_name = file_name
        self.file_path = file_path
        self.url_or_data = url_or_data
        self.is_private = is_private
        self.status = status

    def __str__(self):
        return "Attachment(thumbnail={}, file_name={}, file_path={}, url_or_data={}, is_private={}, status={})".format(self.thumbnail, self.file_name, self.file_path, self.url_or_data, self.is_private, self.status)

    def __eq__(self, other):
        if self.thumbnail != other.thumbnail:
            return False
        if self.file_name != other.file_name:
            return False
        if self.file_path != other.file_path:
            return False
        if self.url_or_data != other.url_or_data:
            return False
        if self.is_private != other.is_private:
            return False
        if self.status != other.status:
            return False
        return True

class _UniffiConverterTypeAttachment(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Attachment(
            thumbnail=_UniffiConverterString.read(buf),
            file_name=_UniffiConverterString.read(buf),
            file_path=_UniffiConverterString.read(buf),
            url_or_data=_UniffiConverterString.read(buf),
            is_private=_UniffiConverterBool.read(buf),
            status=_UniffiConverterTypeAttachmentStatus.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.thumbnail, buf)
        _UniffiConverterString.write(value.file_name, buf)
        _UniffiConverterString.write(value.file_path, buf)
        _UniffiConverterString.write(value.url_or_data, buf)
        _UniffiConverterBool.write(value.is_private, buf)
        _UniffiConverterTypeAttachmentStatus.write(value.status, buf)


class AuthInfo:
    endpoint: "str";user_id: "str";avatar: "str";name: "str";token: "str";

    @typing.no_type_check
    def __init__(self, endpoint: "str", user_id: "str", avatar: "str", name: "str", token: "str"):
        self.endpoint = endpoint
        self.user_id = user_id
        self.avatar = avatar
        self.name = name
        self.token = token

    def __str__(self):
        return "AuthInfo(endpoint={}, user_id={}, avatar={}, name={}, token={})".format(self.endpoint, self.user_id, self.avatar, self.name, self.token)

    def __eq__(self, other):
        if self.endpoint != other.endpoint:
            return False
        if self.user_id != other.user_id:
            return False
        if self.avatar != other.avatar:
            return False
        if self.name != other.name:
            return False
        if self.token != other.token:
            return False
        return True

class _UniffiConverterTypeAuthInfo(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return AuthInfo(
            endpoint=_UniffiConverterString.read(buf),
            user_id=_UniffiConverterString.read(buf),
            avatar=_UniffiConverterString.read(buf),
            name=_UniffiConverterString.read(buf),
            token=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.endpoint, buf)
        _UniffiConverterString.write(value.user_id, buf)
        _UniffiConverterString.write(value.avatar, buf)
        _UniffiConverterString.write(value.name, buf)
        _UniffiConverterString.write(value.token, buf)


class ChatRequest:
    type: "str";id: "str";code: "int";topic_id: "str";seq: "int";attendee: "str";attendee_profile: "typing.Optional[User]";chat_id: "str";created_at: "str";content: "typing.Optional[Content]";e2e_content: "typing.Optional[str]";message: "typing.Optional[str]";source: "typing.Optional[str]";

    @typing.no_type_check
    def __init__(self, type: "str", id: "str", code: "int", topic_id: "str", seq: "int", attendee: "str", attendee_profile: "typing.Optional[User]", chat_id: "str", created_at: "str", content: "typing.Optional[Content]", e2e_content: "typing.Optional[str]", message: "typing.Optional[str]", source: "typing.Optional[str]"):
        self.type = type
        self.id = id
        self.code = code
        self.topic_id = topic_id
        self.seq = seq
        self.attendee = attendee
        self.attendee_profile = attendee_profile
        self.chat_id = chat_id
        self.created_at = created_at
        self.content = content
        self.e2e_content = e2e_content
        self.message = message
        self.source = source

    def __str__(self):
        return "ChatRequest(type={}, id={}, code={}, topic_id={}, seq={}, attendee={}, attendee_profile={}, chat_id={}, created_at={}, content={}, e2e_content={}, message={}, source={})".format(self.type, self.id, self.code, self.topic_id, self.seq, self.attendee, self.attendee_profile, self.chat_id, self.created_at, self.content, self.e2e_content, self.message, self.source)

    def __eq__(self, other):
        if self.type != other.type:
            return False
        if self.id != other.id:
            return False
        if self.code != other.code:
            return False
        if self.topic_id != other.topic_id:
            return False
        if self.seq != other.seq:
            return False
        if self.attendee != other.attendee:
            return False
        if self.attendee_profile != other.attendee_profile:
            return False
        if self.chat_id != other.chat_id:
            return False
        if self.created_at != other.created_at:
            return False
        if self.content != other.content:
            return False
        if self.e2e_content != other.e2e_content:
            return False
        if self.message != other.message:
            return False
        if self.source != other.source:
            return False
        return True

class _UniffiConverterTypeChatRequest(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ChatRequest(
            type=_UniffiConverterString.read(buf),
            id=_UniffiConverterString.read(buf),
            code=_UniffiConverterUInt32.read(buf),
            topic_id=_UniffiConverterString.read(buf),
            seq=_UniffiConverterInt64.read(buf),
            attendee=_UniffiConverterString.read(buf),
            attendee_profile=_UniffiConverterOptionalTypeUser.read(buf),
            chat_id=_UniffiConverterString.read(buf),
            created_at=_UniffiConverterString.read(buf),
            content=_UniffiConverterOptionalTypeContent.read(buf),
            e2e_content=_UniffiConverterOptionalString.read(buf),
            message=_UniffiConverterOptionalString.read(buf),
            source=_UniffiConverterOptionalString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.type, buf)
        _UniffiConverterString.write(value.id, buf)
        _UniffiConverterUInt32.write(value.code, buf)
        _UniffiConverterString.write(value.topic_id, buf)
        _UniffiConverterInt64.write(value.seq, buf)
        _UniffiConverterString.write(value.attendee, buf)
        _UniffiConverterOptionalTypeUser.write(value.attendee_profile, buf)
        _UniffiConverterString.write(value.chat_id, buf)
        _UniffiConverterString.write(value.created_at, buf)
        _UniffiConverterOptionalTypeContent.write(value.content, buf)
        _UniffiConverterOptionalString.write(value.e2e_content, buf)
        _UniffiConverterOptionalString.write(value.message, buf)
        _UniffiConverterOptionalString.write(value.source, buf)


class Content:
    type: "str";encrypted: "bool";checksum: "int";text: "str";placeholder: "str";thumbnail: "str";duration: "str";size: "int";width: "float";height: "float";mentions: "typing.List[str]";reply: "str";created_at: "str";attachment: "typing.Optional[Attachment]";

    @typing.no_type_check
    def __init__(self, type: "str", encrypted: "bool", checksum: "int", text: "str", placeholder: "str", thumbnail: "str", duration: "str", size: "int", width: "float", height: "float", mentions: "typing.List[str]", reply: "str", created_at: "str", attachment: "typing.Optional[Attachment]"):
        self.type = type
        self.encrypted = encrypted
        self.checksum = checksum
        self.text = text
        self.placeholder = placeholder
        self.thumbnail = thumbnail
        self.duration = duration
        self.size = size
        self.width = width
        self.height = height
        self.mentions = mentions
        self.reply = reply
        self.created_at = created_at
        self.attachment = attachment

    def __str__(self):
        return "Content(type={}, encrypted={}, checksum={}, text={}, placeholder={}, thumbnail={}, duration={}, size={}, width={}, height={}, mentions={}, reply={}, created_at={}, attachment={})".format(self.type, self.encrypted, self.checksum, self.text, self.placeholder, self.thumbnail, self.duration, self.size, self.width, self.height, self.mentions, self.reply, self.created_at, self.attachment)

    def __eq__(self, other):
        if self.type != other.type:
            return False
        if self.encrypted != other.encrypted:
            return False
        if self.checksum != other.checksum:
            return False
        if self.text != other.text:
            return False
        if self.placeholder != other.placeholder:
            return False
        if self.thumbnail != other.thumbnail:
            return False
        if self.duration != other.duration:
            return False
        if self.size != other.size:
            return False
        if self.width != other.width:
            return False
        if self.height != other.height:
            return False
        if self.mentions != other.mentions:
            return False
        if self.reply != other.reply:
            return False
        if self.created_at != other.created_at:
            return False
        if self.attachment != other.attachment:
            return False
        return True

class _UniffiConverterTypeContent(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Content(
            type=_UniffiConverterString.read(buf),
            encrypted=_UniffiConverterBool.read(buf),
            checksum=_UniffiConverterUInt32.read(buf),
            text=_UniffiConverterString.read(buf),
            placeholder=_UniffiConverterString.read(buf),
            thumbnail=_UniffiConverterString.read(buf),
            duration=_UniffiConverterString.read(buf),
            size=_UniffiConverterUInt64.read(buf),
            width=_UniffiConverterFloat.read(buf),
            height=_UniffiConverterFloat.read(buf),
            mentions=_UniffiConverterSequenceString.read(buf),
            reply=_UniffiConverterString.read(buf),
            created_at=_UniffiConverterString.read(buf),
            attachment=_UniffiConverterOptionalTypeAttachment.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.type, buf)
        _UniffiConverterBool.write(value.encrypted, buf)
        _UniffiConverterUInt32.write(value.checksum, buf)
        _UniffiConverterString.write(value.text, buf)
        _UniffiConverterString.write(value.placeholder, buf)
        _UniffiConverterString.write(value.thumbnail, buf)
        _UniffiConverterString.write(value.duration, buf)
        _UniffiConverterUInt64.write(value.size, buf)
        _UniffiConverterFloat.write(value.width, buf)
        _UniffiConverterFloat.write(value.height, buf)
        _UniffiConverterSequenceString.write(value.mentions, buf)
        _UniffiConverterString.write(value.reply, buf)
        _UniffiConverterString.write(value.created_at, buf)
        _UniffiConverterOptionalTypeAttachment.write(value.attachment, buf)


class Conversation:
    owner_id: "str";topic_id: "str";updated_at: "str";last_seq: "int";last_read_seq: "int";multiple: "bool";attendee: "str";name: "str";icon: "str";sticky: "bool";mute: "bool";source: "str";unread: "int";last_sender_id: "str";last_message: "typing.Optional[Content]";last_message_at: "str";cached_at: "int";is_partial: "bool";

    @typing.no_type_check
    def __init__(self, owner_id: "str", topic_id: "str", updated_at: "str", last_seq: "int", last_read_seq: "int", multiple: "bool", attendee: "str", name: "str", icon: "str", sticky: "bool", mute: "bool", source: "str", unread: "int", last_sender_id: "str", last_message: "typing.Optional[Content]", last_message_at: "str", cached_at: "int", is_partial: "bool"):
        self.owner_id = owner_id
        self.topic_id = topic_id
        self.updated_at = updated_at
        self.last_seq = last_seq
        self.last_read_seq = last_read_seq
        self.multiple = multiple
        self.attendee = attendee
        self.name = name
        self.icon = icon
        self.sticky = sticky
        self.mute = mute
        self.source = source
        self.unread = unread
        self.last_sender_id = last_sender_id
        self.last_message = last_message
        self.last_message_at = last_message_at
        self.cached_at = cached_at
        self.is_partial = is_partial

    def __str__(self):
        return "Conversation(owner_id={}, topic_id={}, updated_at={}, last_seq={}, last_read_seq={}, multiple={}, attendee={}, name={}, icon={}, sticky={}, mute={}, source={}, unread={}, last_sender_id={}, last_message={}, last_message_at={}, cached_at={}, is_partial={})".format(self.owner_id, self.topic_id, self.updated_at, self.last_seq, self.last_read_seq, self.multiple, self.attendee, self.name, self.icon, self.sticky, self.mute, self.source, self.unread, self.last_sender_id, self.last_message, self.last_message_at, self.cached_at, self.is_partial)

    def __eq__(self, other):
        if self.owner_id != other.owner_id:
            return False
        if self.topic_id != other.topic_id:
            return False
        if self.updated_at != other.updated_at:
            return False
        if self.last_seq != other.last_seq:
            return False
        if self.last_read_seq != other.last_read_seq:
            return False
        if self.multiple != other.multiple:
            return False
        if self.attendee != other.attendee:
            return False
        if self.name != other.name:
            return False
        if self.icon != other.icon:
            return False
        if self.sticky != other.sticky:
            return False
        if self.mute != other.mute:
            return False
        if self.source != other.source:
            return False
        if self.unread != other.unread:
            return False
        if self.last_sender_id != other.last_sender_id:
            return False
        if self.last_message != other.last_message:
            return False
        if self.last_message_at != other.last_message_at:
            return False
        if self.cached_at != other.cached_at:
            return False
        if self.is_partial != other.is_partial:
            return False
        return True

class _UniffiConverterTypeConversation(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Conversation(
            owner_id=_UniffiConverterString.read(buf),
            topic_id=_UniffiConverterString.read(buf),
            updated_at=_UniffiConverterString.read(buf),
            last_seq=_UniffiConverterInt64.read(buf),
            last_read_seq=_UniffiConverterInt64.read(buf),
            multiple=_UniffiConverterBool.read(buf),
            attendee=_UniffiConverterString.read(buf),
            name=_UniffiConverterString.read(buf),
            icon=_UniffiConverterString.read(buf),
            sticky=_UniffiConverterBool.read(buf),
            mute=_UniffiConverterBool.read(buf),
            source=_UniffiConverterString.read(buf),
            unread=_UniffiConverterInt64.read(buf),
            last_sender_id=_UniffiConverterString.read(buf),
            last_message=_UniffiConverterOptionalTypeContent.read(buf),
            last_message_at=_UniffiConverterString.read(buf),
            cached_at=_UniffiConverterInt64.read(buf),
            is_partial=_UniffiConverterBool.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.owner_id, buf)
        _UniffiConverterString.write(value.topic_id, buf)
        _UniffiConverterString.write(value.updated_at, buf)
        _UniffiConverterInt64.write(value.last_seq, buf)
        _UniffiConverterInt64.write(value.last_read_seq, buf)
        _UniffiConverterBool.write(value.multiple, buf)
        _UniffiConverterString.write(value.attendee, buf)
        _UniffiConverterString.write(value.name, buf)
        _UniffiConverterString.write(value.icon, buf)
        _UniffiConverterBool.write(value.sticky, buf)
        _UniffiConverterBool.write(value.mute, buf)
        _UniffiConverterString.write(value.source, buf)
        _UniffiConverterInt64.write(value.unread, buf)
        _UniffiConverterString.write(value.last_sender_id, buf)
        _UniffiConverterOptionalTypeContent.write(value.last_message, buf)
        _UniffiConverterString.write(value.last_message_at, buf)
        _UniffiConverterInt64.write(value.cached_at, buf)
        _UniffiConverterBool.write(value.is_partial, buf)


class TopicNotice:
    text: "str";publisher: "str";updated_at: "str";

    @typing.no_type_check
    def __init__(self, text: "str", publisher: "str", updated_at: "str"):
        self.text = text
        self.publisher = publisher
        self.updated_at = updated_at

    def __str__(self):
        return "TopicNotice(text={}, publisher={}, updated_at={})".format(self.text, self.publisher, self.updated_at)

    def __eq__(self, other):
        if self.text != other.text:
            return False
        if self.publisher != other.publisher:
            return False
        if self.updated_at != other.updated_at:
            return False
        return True

class _UniffiConverterTypeTopicNotice(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TopicNotice(
            text=_UniffiConverterString.read(buf),
            publisher=_UniffiConverterString.read(buf),
            updated_at=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.text, buf)
        _UniffiConverterString.write(value.publisher, buf)
        _UniffiConverterString.write(value.updated_at, buf)


class User:
    user_id: "str";name: "str";avatar: "str";public_key: "str";remark: "str";is_contact: "bool";is_star: "bool";is_blocked: "bool";locale: "str";city: "str";country: "str";source: "str";created_at: "str";gender: "str";cached_at: "int";is_partial: "bool";

    @typing.no_type_check
    def __init__(self, user_id: "str", name: "str", avatar: "str", public_key: "str", remark: "str", is_contact: "bool", is_star: "bool", is_blocked: "bool", locale: "str", city: "str", country: "str", source: "str", created_at: "str", gender: "str", cached_at: "int", is_partial: "bool"):
        self.user_id = user_id
        self.name = name
        self.avatar = avatar
        self.public_key = public_key
        self.remark = remark
        self.is_contact = is_contact
        self.is_star = is_star
        self.is_blocked = is_blocked
        self.locale = locale
        self.city = city
        self.country = country
        self.source = source
        self.created_at = created_at
        self.gender = gender
        self.cached_at = cached_at
        self.is_partial = is_partial

    def __str__(self):
        return "User(user_id={}, name={}, avatar={}, public_key={}, remark={}, is_contact={}, is_star={}, is_blocked={}, locale={}, city={}, country={}, source={}, created_at={}, gender={}, cached_at={}, is_partial={})".format(self.user_id, self.name, self.avatar, self.public_key, self.remark, self.is_contact, self.is_star, self.is_blocked, self.locale, self.city, self.country, self.source, self.created_at, self.gender, self.cached_at, self.is_partial)

    def __eq__(self, other):
        if self.user_id != other.user_id:
            return False
        if self.name != other.name:
            return False
        if self.avatar != other.avatar:
            return False
        if self.public_key != other.public_key:
            return False
        if self.remark != other.remark:
            return False
        if self.is_contact != other.is_contact:
            return False
        if self.is_star != other.is_star:
            return False
        if self.is_blocked != other.is_blocked:
            return False
        if self.locale != other.locale:
            return False
        if self.city != other.city:
            return False
        if self.country != other.country:
            return False
        if self.source != other.source:
            return False
        if self.created_at != other.created_at:
            return False
        if self.gender != other.gender:
            return False
        if self.cached_at != other.cached_at:
            return False
        if self.is_partial != other.is_partial:
            return False
        return True

class _UniffiConverterTypeUser(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return User(
            user_id=_UniffiConverterString.read(buf),
            name=_UniffiConverterString.read(buf),
            avatar=_UniffiConverterString.read(buf),
            public_key=_UniffiConverterString.read(buf),
            remark=_UniffiConverterString.read(buf),
            is_contact=_UniffiConverterBool.read(buf),
            is_star=_UniffiConverterBool.read(buf),
            is_blocked=_UniffiConverterBool.read(buf),
            locale=_UniffiConverterString.read(buf),
            city=_UniffiConverterString.read(buf),
            country=_UniffiConverterString.read(buf),
            source=_UniffiConverterString.read(buf),
            created_at=_UniffiConverterString.read(buf),
            gender=_UniffiConverterString.read(buf),
            cached_at=_UniffiConverterInt64.read(buf),
            is_partial=_UniffiConverterBool.read(buf),
        )

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.user_id, buf)
        _UniffiConverterString.write(value.name, buf)
        _UniffiConverterString.write(value.avatar, buf)
        _UniffiConverterString.write(value.public_key, buf)
        _UniffiConverterString.write(value.remark, buf)
        _UniffiConverterBool.write(value.is_contact, buf)
        _UniffiConverterBool.write(value.is_star, buf)
        _UniffiConverterBool.write(value.is_blocked, buf)
        _UniffiConverterString.write(value.locale, buf)
        _UniffiConverterString.write(value.city, buf)
        _UniffiConverterString.write(value.country, buf)
        _UniffiConverterString.write(value.source, buf)
        _UniffiConverterString.write(value.created_at, buf)
        _UniffiConverterString.write(value.gender, buf)
        _UniffiConverterInt64.write(value.cached_at, buf)
        _UniffiConverterBool.write(value.is_partial, buf)





class AttachmentStatus(enum.Enum):
    TO_UPLOAD = 1
    TO_DOWNLOAD = 2
    UPLOADING = 3
    DOWNLOADING = 4
    PAUSED = 5
    DONE = 6
    FAILED = 7
    


class _UniffiConverterTypeAttachmentStatus(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return AttachmentStatus.TO_UPLOAD
        if variant == 2:
            return AttachmentStatus.TO_DOWNLOAD
        if variant == 3:
            return AttachmentStatus.UPLOADING
        if variant == 4:
            return AttachmentStatus.DOWNLOADING
        if variant == 5:
            return AttachmentStatus.PAUSED
        if variant == 6:
            return AttachmentStatus.DONE
        if variant == 7:
            return AttachmentStatus.FAILED
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == AttachmentStatus.TO_UPLOAD:
            buf.write_i32(1)
        if value == AttachmentStatus.TO_DOWNLOAD:
            buf.write_i32(2)
        if value == AttachmentStatus.UPLOADING:
            buf.write_i32(3)
        if value == AttachmentStatus.DOWNLOADING:
            buf.write_i32(4)
        if value == AttachmentStatus.PAUSED:
            buf.write_i32(5)
        if value == AttachmentStatus.DONE:
            buf.write_i32(6)
        if value == AttachmentStatus.FAILED:
            buf.write_i32(7)



# ClientError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class ClientError(Exception):
    pass

_UniffiTempClientError = ClientError

class ClientError:  # type: ignore
    class InvalidPassword(_UniffiTempClientError):
        def __repr__(self):
            return "ClientError.InvalidPassword({})".format(repr(str(self)))
    _UniffiTempClientError.InvalidPassword = InvalidPassword # type: ignore
    class Forbidden(_UniffiTempClientError):
        def __repr__(self):
            return "ClientError.Forbidden({})".format(repr(str(self)))
    _UniffiTempClientError.Forbidden = Forbidden # type: ignore
    class TokenExpired(_UniffiTempClientError):
        def __repr__(self):
            return "ClientError.TokenExpired({})".format(repr(str(self)))
    _UniffiTempClientError.TokenExpired = TokenExpired # type: ignore
    class NetworkBroken(_UniffiTempClientError):
        def __repr__(self):
            return "ClientError.NetworkBroken({})".format(repr(str(self)))
    _UniffiTempClientError.NetworkBroken = NetworkBroken # type: ignore
    class TopicNotFound(_UniffiTempClientError):
        def __repr__(self):
            return "ClientError.TopicNotFound({})".format(repr(str(self)))
    _UniffiTempClientError.TopicNotFound = TopicNotFound # type: ignore
    class TopicKnockNotFound(_UniffiTempClientError):
        def __repr__(self):
            return "ClientError.TopicKnockNotFound({})".format(repr(str(self)))
    _UniffiTempClientError.TopicKnockNotFound = TopicKnockNotFound # type: ignore
    class ChatLogNotFound(_UniffiTempClientError):
        def __repr__(self):
            return "ClientError.ChatLogNotFound({})".format(repr(str(self)))
    _UniffiTempClientError.ChatLogNotFound = ChatLogNotFound # type: ignore
    class InvalidContent(_UniffiTempClientError):
        def __repr__(self):
            return "ClientError.InvalidContent({})".format(repr(str(self)))
    _UniffiTempClientError.InvalidContent = InvalidContent # type: ignore
    class ConversationNotFound(_UniffiTempClientError):
        def __repr__(self):
            return "ClientError.ConversationNotFound({})".format(repr(str(self)))
    _UniffiTempClientError.ConversationNotFound = ConversationNotFound # type: ignore
    class UserNotFound(_UniffiTempClientError):
        def __repr__(self):
            return "ClientError.UserNotFound({})".format(repr(str(self)))
    _UniffiTempClientError.UserNotFound = UserNotFound # type: ignore
    class KickOffByOtherClient(_UniffiTempClientError):
        def __repr__(self):
            return "ClientError.KickOffByOtherClient({})".format(repr(str(self)))
    _UniffiTempClientError.KickOffByOtherClient = KickOffByOtherClient # type: ignore
    class StdError(_UniffiTempClientError):
        def __repr__(self):
            return "ClientError.StdError({})".format(repr(str(self)))
    _UniffiTempClientError.StdError = StdError # type: ignore
    class WebsocketError(_UniffiTempClientError):
        def __repr__(self):
            return "ClientError.WebsocketError({})".format(repr(str(self)))
    _UniffiTempClientError.WebsocketError = WebsocketError # type: ignore
    class Http(_UniffiTempClientError):
        def __repr__(self):
            return "ClientError.Http({})".format(repr(str(self)))
    _UniffiTempClientError.Http = Http # type: ignore
    class Json(_UniffiTempClientError):
        def __repr__(self):
            return "ClientError.Json({})".format(repr(str(self)))
    _UniffiTempClientError.Json = Json # type: ignore
    class UserCancel(_UniffiTempClientError):
        def __repr__(self):
            return "ClientError.UserCancel({})".format(repr(str(self)))
    _UniffiTempClientError.UserCancel = UserCancel # type: ignore
    class Storage(_UniffiTempClientError):
        def __repr__(self):
            return "ClientError.Storage({})".format(repr(str(self)))
    _UniffiTempClientError.Storage = Storage # type: ignore
    class Other(_UniffiTempClientError):
        def __repr__(self):
            return "ClientError.Other({})".format(repr(str(self)))
    _UniffiTempClientError.Other = Other # type: ignore

ClientError = _UniffiTempClientError # type: ignore
del _UniffiTempClientError


class _UniffiConverterTypeClientError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ClientError.InvalidPassword(
                _UniffiConverterString.read(buf),
            )
        if variant == 2:
            return ClientError.Forbidden(
                _UniffiConverterString.read(buf),
            )
        if variant == 3:
            return ClientError.TokenExpired(
                _UniffiConverterString.read(buf),
            )
        if variant == 4:
            return ClientError.NetworkBroken(
                _UniffiConverterString.read(buf),
            )
        if variant == 5:
            return ClientError.TopicNotFound(
                _UniffiConverterString.read(buf),
            )
        if variant == 6:
            return ClientError.TopicKnockNotFound(
                _UniffiConverterString.read(buf),
            )
        if variant == 7:
            return ClientError.ChatLogNotFound(
                _UniffiConverterString.read(buf),
            )
        if variant == 8:
            return ClientError.InvalidContent(
                _UniffiConverterString.read(buf),
            )
        if variant == 9:
            return ClientError.ConversationNotFound(
                _UniffiConverterString.read(buf),
            )
        if variant == 10:
            return ClientError.UserNotFound(
                _UniffiConverterString.read(buf),
            )
        if variant == 11:
            return ClientError.KickOffByOtherClient(
                _UniffiConverterString.read(buf),
            )
        if variant == 12:
            return ClientError.StdError(
                _UniffiConverterString.read(buf),
            )
        if variant == 13:
            return ClientError.WebsocketError(
                _UniffiConverterString.read(buf),
            )
        if variant == 14:
            return ClientError.Http(
                _UniffiConverterString.read(buf),
            )
        if variant == 15:
            return ClientError.Json(
                _UniffiConverterString.read(buf),
            )
        if variant == 16:
            return ClientError.UserCancel(
                _UniffiConverterString.read(buf),
            )
        if variant == 17:
            return ClientError.Storage(
                _UniffiConverterString.read(buf),
            )
        if variant == 18:
            return ClientError.Other(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def write(value, buf):
        if isinstance(value, ClientError.InvalidPassword):
            buf.write_i32(1)
        if isinstance(value, ClientError.Forbidden):
            buf.write_i32(2)
        if isinstance(value, ClientError.TokenExpired):
            buf.write_i32(3)
        if isinstance(value, ClientError.NetworkBroken):
            buf.write_i32(4)
        if isinstance(value, ClientError.TopicNotFound):
            buf.write_i32(5)
        if isinstance(value, ClientError.TopicKnockNotFound):
            buf.write_i32(6)
        if isinstance(value, ClientError.ChatLogNotFound):
            buf.write_i32(7)
        if isinstance(value, ClientError.InvalidContent):
            buf.write_i32(8)
        if isinstance(value, ClientError.ConversationNotFound):
            buf.write_i32(9)
        if isinstance(value, ClientError.UserNotFound):
            buf.write_i32(10)
        if isinstance(value, ClientError.KickOffByOtherClient):
            buf.write_i32(11)
        if isinstance(value, ClientError.StdError):
            buf.write_i32(12)
        if isinstance(value, ClientError.WebsocketError):
            buf.write_i32(13)
        if isinstance(value, ClientError.Http):
            buf.write_i32(14)
        if isinstance(value, ClientError.Json):
            buf.write_i32(15)
        if isinstance(value, ClientError.UserCancel):
            buf.write_i32(16)
        if isinstance(value, ClientError.Storage):
            buf.write_i32(17)
        if isinstance(value, ClientError.Other):
            buf.write_i32(18)



class _UniffiConverterOptionalString(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeAttachment(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeAttachment.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeAttachment.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeContent(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeContent.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeContent.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeUser(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeUser.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeUser.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterString.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterString.read(buf) for i in range(count)
        ]

__all__ = [
    "InternalError",
    "AttachmentStatus",
    "ClientError",
    "Attachment",
    "AuthInfo",
    "ChatRequest",
    "Content",
    "Conversation",
    "TopicNotice",
    "User",
]

