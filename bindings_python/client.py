# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import typing
import platform

# Used for default argument values
DEFAULT = object()


class RustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_int32),
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def alloc(size):
        return rust_call(_UniFFILib.ffi_client_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return rust_call(_UniFFILib.ffi_client_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return rust_call(_UniFFILib.ffi_client_rustbuffer_free, self)

    def __str__(self):
        return "RustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def allocWithBuilder(*args):
        """Context-manger to allocate a buffer using a RustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = RustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consumeWithStream(self):
        """Context-manager to consume a buffer using a RustBufferStream.

        The RustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = RustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consumeWithStream")
        finally:
            self.free()

    @contextlib.contextmanager
    def readWithStream(self):
        """Context-manager to read a buffer using a RustBufferStream.

        This is like consumeWithStream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `RustBuffer` data.
        """
        s = RustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of readWithStream")

class ForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "ForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class RustBufferStream:
    """
    Helper for structured reading of bytes from a RustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def readI8(self):
        return self._unpack_from(1, ">b")

    def readU8(self):
        return self._unpack_from(1, ">B")

    def readI16(self):
        return self._unpack_from(2, ">h")

    def readU16(self):
        return self._unpack_from(2, ">H")

    def readI32(self):
        return self._unpack_from(4, ">i")

    def readU32(self):
        return self._unpack_from(4, ">I")

    def readI64(self):
        return self._unpack_from(8, ">q")

    def readU64(self):
        return self._unpack_from(8, ">Q")

    def readFloat(self):
        v = self._unpack_from(4, ">f")
        return v

    def readDouble(self):
        return self._unpack_from(8, ">d")

    def readCSizeT(self):
        return self._unpack_from(ctypes.sizeof(ctypes.c_size_t) , "@N")

class RustBufferBuilder:
    """
    Helper for structured writing of bytes into a RustBuffer.
    """

    def __init__(self):
        self.rbuf = RustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, numBytes):
        if self.rbuf.len + numBytes > self.rbuf.capacity:
            self.rbuf = RustBuffer.reserve(self.rbuf, numBytes)
        yield None
        self.rbuf.len += numBytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def writeI8(self, v):
        self._pack_into(1, ">b", v)

    def writeU8(self, v):
        self._pack_into(1, ">B", v)

    def writeI16(self, v):
        self._pack_into(2, ">h", v)

    def writeU16(self, v):
        self._pack_into(2, ">H", v)

    def writeI32(self, v):
        self._pack_into(4, ">i", v)

    def writeU32(self, v):
        self._pack_into(4, ">I", v)

    def writeI64(self, v):
        self._pack_into(8, ">q", v)

    def writeU64(self, v):
        self._pack_into(8, ">Q", v)

    def writeFloat(self, v):
        self._pack_into(4, ">f", v)

    def writeDouble(self, v):
        self._pack_into(8, ">d", v)

    def writeCSizeT(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class RustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", RustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_PANIC = 2

    def __str__(self):
        if self.code == RustCallStatus.CALL_SUCCESS:
            return "RustCallStatus(CALL_SUCCESS)"
        elif self.code == RustCallStatus.CALL_ERROR:
            return "RustCallStatus(CALL_ERROR)"
        elif self.code == RustCallStatus.CALL_PANIC:
            return "RustCallStatus(CALL_PANIC)"
        else:
            return "RustCallStatus(<invalid code>)"

def rust_call(fn, *args):
    # Call a rust function
    return rust_call_with_error(None, fn, *args)

def rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the FfiConverter for the error class that corresponds to the result.
    call_status = RustCallStatus(code=RustCallStatus.CALL_SUCCESS, error_buf=RustBuffer(0, 0, None))

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def rust_call_async(scaffolding_fn, callback_fn, *args):
    # Call the scaffolding function, passing it a callback handler for `AsyncTypes.py` and a pointer
    # to a python Future object.  The async function then awaits the Future.
    uniffi_eventloop = asyncio.get_running_loop()
    uniffi_py_future = uniffi_eventloop.create_future()
    uniffi_call_status = RustCallStatus(code=RustCallStatus.CALL_SUCCESS, error_buf=RustBuffer(0, 0, None))
    scaffolding_fn(*args,
       FfiConverterForeignExecutor._pointer_manager.new_pointer(uniffi_eventloop),
       callback_fn,
       # Note: It's tempting to skip the pointer manager and just use a `py_object` pointing to a
       # local variable like we do in Swift.  However, Python doesn't use cooperative cancellation
       # -- asyncio can cancel a task at anytime.  This means if we use a local variable, the Rust
       # callback could fire with a dangling pointer.
       UniFfiPyFuturePointerManager.new_pointer(uniffi_py_future),
       ctypes.byref(uniffi_call_status),
    )
    uniffi_check_call_status(None, uniffi_call_status)
    return uniffi_py_future

def uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == RustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == RustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == RustCallStatus.CALL_PANIC:
        # When the rust code sees a panic, it tries to construct a RustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = FfiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid RustCallStatus code: {}".format(
            call_status.code))

# A function pointer for a callback as defined by UniFFI.
# Rust definition `fn(handle: u64, method: u32, args: RustBuffer, buf_ptr: *mut RustBuffer) -> int`
FOREIGN_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_ulonglong, ctypes.c_ulong, ctypes.POINTER(ctypes.c_char), ctypes.c_int, ctypes.POINTER(RustBuffer))
class UniFfiPointerManagerCPython:
    """
    Manage giving out pointers to Python objects on CPython

    This class is used to generate opaque pointers that reference Python objects to pass to Rust.
    It assumes a CPython platform.  See UniFfiPointerManagerGeneral for the alternative.
    """

    def new_pointer(self, obj):
        """
        Get a pointer for an object as a ctypes.c_size_t instance

        Each call to new_pointer() must be balanced with exactly one call to release_pointer()

        This returns a ctypes.c_size_t.  This is always the same size as a pointer and can be
        interchanged with pointers for FFI function arguments and return values.
        """
        # IncRef the object since we're going to pass a pointer to Rust
        ctypes.pythonapi.Py_IncRef(ctypes.py_object(obj))
        # id() is the object address on CPython
        # (https://docs.python.org/3/library/functions.html#id)
        return id(obj)

    def release_pointer(self, address):
        py_obj = ctypes.cast(address, ctypes.py_object)
        obj = py_obj.value
        ctypes.pythonapi.Py_DecRef(py_obj)
        return obj

    def lookup(self, address):
        return ctypes.cast(address, ctypes.py_object).value

class UniFfiPointerManagerGeneral:
    """
    Manage giving out pointers to Python objects on non-CPython platforms

    This has the same API as UniFfiPointerManagerCPython, but doesn't assume we're running on
    CPython and is slightly slower.

    Instead of using real pointers, it maps integer values to objects and returns the keys as
    c_size_t values.
    """

    def __init__(self):
        self._map = {}
        self._lock = threading.Lock()
        self._current_handle = 0

    def new_pointer(self, obj):
        with self._lock:
            handle = self._current_handle
            self._current_handle += 1
            self._map[handle] = obj
        return handle

    def release_pointer(self, handle):
        with self._lock:
            return self._map.pop(handle)

    def lookup(self, handle):
        with self._lock:
            return self._map[handle]

# Pick an pointer manager implementation based on the platform
if platform.python_implementation() == 'CPython':
    UniFfiPointerManager = UniFfiPointerManagerCPython  # type: ignore
else:
    UniFfiPointerManager = UniFfiPointerManagerGeneral  # type: ignore
# Types conforming to `FfiConverterPrimitive` pass themselves directly over the FFI.
class FfiConverterPrimitive:
    @classmethod
    def check(cls, value):
        return value

    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return cls.lowerUnchecked(cls.check(value))

    @classmethod
    def lowerUnchecked(cls, value):
        return value

    @classmethod
    def write(cls, value, buf):
        cls.writeUnchecked(cls.check(value), buf)

class FfiConverterPrimitiveInt(FfiConverterPrimitive):
    @classmethod
    def check(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))
        return super().check(value)

class FfiConverterPrimitiveFloat(FfiConverterPrimitive):
    @classmethod
    def check(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))
        return super().check(value)

# Helper class for wrapper types that will always go through a RustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class FfiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consumeWithStream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with RustBuffer.allocWithBuilder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code,
# and the FFI Function declarations in a com.sun.jna.Library.
# Define some ctypes FFI types that we use in the library

"""
ctypes type for the foreign executor callback.  This is a built-in interface for scheduling
tasks

Args:
  executor: opaque c_size_t value representing the eventloop
  delay: delay in ms
  task: function pointer to the task callback
  task_data: void pointer to the task callback data

Normally we should call task(task_data) after the detail.
However, when task is NULL this indicates that Rust has dropped the ForeignExecutor and we should
decrease the EventLoop refcount.
"""
UNIFFI_FOREIGN_EXECUTOR_CALLBACK_T = ctypes.CFUNCTYPE(None, ctypes.c_size_t, ctypes.c_uint32, ctypes.c_void_p, ctypes.c_void_p)

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p)

def uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_size_t, return_type, RustCallStatus)

from pathlib import Path

def loadIndirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("uniffi_client")
    path = str(Path(__file__).parent / libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 22
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_client_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def uniffi_check_api_checksums(lib):
    if lib.uniffi_client_checksum_func_init_log() != 9358:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_func_get_current_user() != 36766:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_func_set_current_user() != 64332:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_func_login() != 28004:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_set_callback() != 55355:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_set_uploader() != 29309:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_prepare() != 33639:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_attach() != 40661:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_app_active() != 53973:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_app_deactivate() != 9654:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_logout() != 28478:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_run_loop() != 57808:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_shutdown() != 41462:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_get_network_state() != 22572:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_get_topics_knock_count() != 11790:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_get_conversations_count() != 25497:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_get_conversation() != 26005:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_remove_conversation() != 26245:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_set_conversation_sticky() != 24476:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_set_conversation_mute() != 19326:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_set_conversation_read() != 61548:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_get_conversations() != 59859:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_sync_conversations() != 36154:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_get_topic() != 63409:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_get_topic_admins() != 32007:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_get_topic_owner() != 20038:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_get_topic_members() != 42408:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_get_chat_logs_desc() != 33827:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_get_chat_log() != 14674:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_search_chat_log() != 60608:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_get_topic_knocks() != 45216:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_create_topic() != 23937:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_create_chat() != 10852:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_update_topic() != 17684:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_update_topic_notice() != 32205:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_silent_topic() != 9520:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_silent_topic_member() != 59564:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_add_topic_admin() != 36967:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_remove_topic_admin() != 36592:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_transfer_topic() != 11354:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_quit_topic() != 3650:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_dismiss_topic() != 4383:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_join_topic() != 36228:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_accept_topic_join() != 22619:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_decline_topic_join() != 39967:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_invite_topic_member() != 32627:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_remove_topic_member() != 6374:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_clean_topic_history() != 18125:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_remove_messages() != 40827:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_get_user() != 62667:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_set_user_remark() != 9172:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_set_user_star() != 1481:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_set_user_block() != 59481:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_set_allow_guest_chat() != 24595:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_do_typing() != 63193:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_do_recall() != 14737:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_do_send_text() != 20437:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_do_send_image() != 59928:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_do_send_voice() != 60890:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_do_send_video() != 46395:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_do_send_file() != 39341:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_do_send_location() != 23943:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_do_send_link() != 4676:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_do_send_invite() != 1178:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_do_send() != 12153:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_upload() != 19554:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_download() != 56540:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_cancel_download() != 64461:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_method_client_cancel_upload() != 10332:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_client_checksum_constructor_client_new() != 20644:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniFFILib = loadIndirect()
_UniFFILib.uniffi_client_fn_free_client.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_free_client.restype = None
_UniFFILib.uniffi_client_fn_constructor_client_new.argtypes = (
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_constructor_client_new.restype = ctypes.c_void_p
_UniFFILib.uniffi_client_fn_method_client_set_callback.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_set_callback.restype = None
_UniFFILib.uniffi_client_fn_method_client_set_uploader.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_set_uploader.restype = None
_UniFFILib.uniffi_client_fn_method_client_prepare.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_prepare.restype = None
_UniFFILib.uniffi_client_fn_method_client_attach.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_attach.restype = None
_UniFFILib.uniffi_client_fn_method_client_app_active.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_app_active.restype = None
_UniFFILib.uniffi_client_fn_method_client_app_deactivate.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_app_deactivate.restype = None
_UniFFILib.uniffi_client_fn_method_client_logout.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_logout.restype = None
_UniFFILib.uniffi_client_fn_method_client_run_loop.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_run_loop.restype = None
_UniFFILib.uniffi_client_fn_method_client_shutdown.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_shutdown.restype = None
_UniFFILib.uniffi_client_fn_method_client_get_network_state.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_get_network_state.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_get_topics_knock_count.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_get_topics_knock_count.restype = ctypes.c_uint32
_UniFFILib.uniffi_client_fn_method_client_get_conversations_count.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_get_conversations_count.restype = ctypes.c_uint32
_UniFFILib.uniffi_client_fn_method_client_get_conversation.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_get_conversation.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_remove_conversation.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_remove_conversation.restype = None
_UniFFILib.uniffi_client_fn_method_client_set_conversation_sticky.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.c_int8,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_set_conversation_sticky.restype = None
_UniFFILib.uniffi_client_fn_method_client_set_conversation_mute.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.c_int8,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_set_conversation_mute.restype = None
_UniFFILib.uniffi_client_fn_method_client_set_conversation_read.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_set_conversation_read.restype = None
_UniFFILib.uniffi_client_fn_method_client_get_conversations.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.c_uint32,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_get_conversations.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_sync_conversations.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_sync_conversations.restype = None
_UniFFILib.uniffi_client_fn_method_client_get_topic.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_get_topic.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_get_topic_admins.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_get_topic_admins.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_get_topic_owner.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_get_topic_owner.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_get_topic_members.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.c_uint32,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_get_topic_members.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_get_chat_logs_desc.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.c_uint64,
    ctypes.c_uint64,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_get_chat_logs_desc.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_get_chat_log.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_get_chat_log.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_search_chat_log.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_search_chat_log.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_get_topic_knocks.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_get_topic_knocks.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_create_topic.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_create_topic.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_create_chat.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_create_chat.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_update_topic.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_update_topic.restype = None
_UniFFILib.uniffi_client_fn_method_client_update_topic_notice.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_update_topic_notice.restype = None
_UniFFILib.uniffi_client_fn_method_client_silent_topic.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_silent_topic.restype = None
_UniFFILib.uniffi_client_fn_method_client_silent_topic_member.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_silent_topic_member.restype = None
_UniFFILib.uniffi_client_fn_method_client_add_topic_admin.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_add_topic_admin.restype = None
_UniFFILib.uniffi_client_fn_method_client_remove_topic_admin.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_remove_topic_admin.restype = None
_UniFFILib.uniffi_client_fn_method_client_transfer_topic.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_transfer_topic.restype = None
_UniFFILib.uniffi_client_fn_method_client_quit_topic.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_quit_topic.restype = None
_UniFFILib.uniffi_client_fn_method_client_dismiss_topic.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_dismiss_topic.restype = None
_UniFFILib.uniffi_client_fn_method_client_join_topic.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_join_topic.restype = None
_UniFFILib.uniffi_client_fn_method_client_accept_topic_join.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_accept_topic_join.restype = None
_UniFFILib.uniffi_client_fn_method_client_decline_topic_join.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_decline_topic_join.restype = None
_UniFFILib.uniffi_client_fn_method_client_invite_topic_member.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_invite_topic_member.restype = None
_UniFFILib.uniffi_client_fn_method_client_remove_topic_member.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_remove_topic_member.restype = None
_UniFFILib.uniffi_client_fn_method_client_clean_topic_history.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.c_int8,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_clean_topic_history.restype = None
_UniFFILib.uniffi_client_fn_method_client_remove_messages.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.c_int8,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_remove_messages.restype = None
_UniFFILib.uniffi_client_fn_method_client_get_user.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_get_user.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_set_user_remark.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_set_user_remark.restype = None
_UniFFILib.uniffi_client_fn_method_client_set_user_star.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.c_int8,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_set_user_star.restype = None
_UniFFILib.uniffi_client_fn_method_client_set_user_block.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.c_int8,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_set_user_block.restype = None
_UniFFILib.uniffi_client_fn_method_client_set_allow_guest_chat.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_set_allow_guest_chat.restype = None
_UniFFILib.uniffi_client_fn_method_client_do_typing.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_do_typing.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_do_recall.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_do_recall.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_do_send_text.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_do_send_text.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_do_send_image.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_do_send_image.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_do_send_voice.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_do_send_voice.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_do_send_video.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_do_send_video.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_do_send_file.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.c_uint64,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_do_send_file.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_do_send_location.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_do_send_location.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_do_send_link.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_do_send_link.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_do_send_invite.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_do_send_invite.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_do_send.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_do_send.restype = RustBuffer
_UniFFILib.uniffi_client_fn_method_client_upload.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.c_int8,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_upload.restype = None
_UniFFILib.uniffi_client_fn_method_client_download.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_download.restype = None
_UniFFILib.uniffi_client_fn_method_client_cancel_download.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_cancel_download.restype = None
_UniFFILib.uniffi_client_fn_method_client_cancel_upload.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_method_client_cancel_upload.restype = None
_UniFFILib.uniffi_client_fn_init_callback_callback.argtypes = (
    FOREIGN_CALLBACK_T,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_init_callback_callback.restype = None
_UniFFILib.uniffi_client_fn_init_callback_uploader.argtypes = (
    FOREIGN_CALLBACK_T,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_init_callback_uploader.restype = None
_UniFFILib.uniffi_client_fn_func_init_log.argtypes = (
    RustBuffer,
    ctypes.c_int8,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_func_init_log.restype = None
_UniFFILib.uniffi_client_fn_func_get_current_user.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_func_get_current_user.restype = RustBuffer
_UniFFILib.uniffi_client_fn_func_set_current_user.argtypes = (
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_func_set_current_user.restype = None
_UniFFILib.uniffi_client_fn_func_login.argtypes = (
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_client_fn_func_login.restype = RustBuffer
_UniFFILib.ffi_client_rustbuffer_alloc.argtypes = (
    ctypes.c_int32,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_client_rustbuffer_alloc.restype = RustBuffer
_UniFFILib.ffi_client_rustbuffer_from_bytes.argtypes = (
    ForeignBytes,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_client_rustbuffer_from_bytes.restype = RustBuffer
_UniFFILib.ffi_client_rustbuffer_free.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_client_rustbuffer_free.restype = None
_UniFFILib.ffi_client_rustbuffer_reserve.argtypes = (
    RustBuffer,
    ctypes.c_int32,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_client_rustbuffer_reserve.restype = RustBuffer
_UniFFILib.uniffi_client_checksum_func_init_log.argtypes = (
)
_UniFFILib.uniffi_client_checksum_func_init_log.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_func_get_current_user.argtypes = (
)
_UniFFILib.uniffi_client_checksum_func_get_current_user.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_func_set_current_user.argtypes = (
)
_UniFFILib.uniffi_client_checksum_func_set_current_user.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_func_login.argtypes = (
)
_UniFFILib.uniffi_client_checksum_func_login.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_set_callback.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_set_callback.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_set_uploader.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_set_uploader.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_prepare.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_prepare.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_attach.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_attach.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_app_active.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_app_active.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_app_deactivate.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_app_deactivate.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_logout.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_logout.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_run_loop.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_run_loop.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_shutdown.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_shutdown.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_get_network_state.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_get_network_state.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_get_topics_knock_count.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_get_topics_knock_count.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_get_conversations_count.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_get_conversations_count.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_get_conversation.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_get_conversation.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_remove_conversation.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_remove_conversation.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_set_conversation_sticky.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_set_conversation_sticky.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_set_conversation_mute.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_set_conversation_mute.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_set_conversation_read.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_set_conversation_read.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_get_conversations.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_get_conversations.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_sync_conversations.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_sync_conversations.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_get_topic.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_get_topic.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_get_topic_admins.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_get_topic_admins.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_get_topic_owner.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_get_topic_owner.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_get_topic_members.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_get_topic_members.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_get_chat_logs_desc.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_get_chat_logs_desc.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_get_chat_log.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_get_chat_log.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_search_chat_log.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_search_chat_log.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_get_topic_knocks.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_get_topic_knocks.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_create_topic.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_create_topic.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_create_chat.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_create_chat.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_update_topic.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_update_topic.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_update_topic_notice.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_update_topic_notice.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_silent_topic.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_silent_topic.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_silent_topic_member.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_silent_topic_member.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_add_topic_admin.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_add_topic_admin.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_remove_topic_admin.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_remove_topic_admin.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_transfer_topic.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_transfer_topic.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_quit_topic.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_quit_topic.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_dismiss_topic.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_dismiss_topic.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_join_topic.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_join_topic.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_accept_topic_join.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_accept_topic_join.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_decline_topic_join.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_decline_topic_join.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_invite_topic_member.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_invite_topic_member.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_remove_topic_member.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_remove_topic_member.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_clean_topic_history.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_clean_topic_history.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_remove_messages.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_remove_messages.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_get_user.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_get_user.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_set_user_remark.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_set_user_remark.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_set_user_star.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_set_user_star.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_set_user_block.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_set_user_block.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_set_allow_guest_chat.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_set_allow_guest_chat.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_do_typing.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_do_typing.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_do_recall.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_do_recall.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_do_send_text.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_do_send_text.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_do_send_image.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_do_send_image.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_do_send_voice.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_do_send_voice.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_do_send_video.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_do_send_video.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_do_send_file.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_do_send_file.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_do_send_location.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_do_send_location.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_do_send_link.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_do_send_link.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_do_send_invite.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_do_send_invite.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_do_send.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_do_send.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_upload.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_upload.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_download.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_download.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_cancel_download.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_cancel_download.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_method_client_cancel_upload.argtypes = (
)
_UniFFILib.uniffi_client_checksum_method_client_cancel_upload.restype = ctypes.c_uint16
_UniFFILib.uniffi_client_checksum_constructor_client_new.argtypes = (
)
_UniFFILib.uniffi_client_checksum_constructor_client_new.restype = ctypes.c_uint16
_UniFFILib.ffi_client_uniffi_contract_version.argtypes = (
)
_UniFFILib.ffi_client_uniffi_contract_version.restype = ctypes.c_uint32
uniffi_check_contract_api_version(_UniFFILib)
uniffi_check_api_checksums(_UniFFILib)

# Public interface members begin here.


class FfiConverterUInt32(FfiConverterPrimitiveInt):
    CLASS_NAME = "u32"
    VALUE_MIN = 0
    VALUE_MAX = 2**32

    @staticmethod
    def read(buf):
        return buf.readU32()

    @staticmethod
    def writeUnchecked(value, buf):
        buf.writeU32(value)

class FfiConverterUInt64(FfiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.readU64()

    @staticmethod
    def writeUnchecked(value, buf):
        buf.writeU64(value)

class FfiConverterFloat(FfiConverterPrimitiveFloat):
    @staticmethod
    def read(buf):
        return buf.readFloat()

    @staticmethod
    def writeUnchecked(value, buf):
        buf.writeFloat(value)

class FfiConverterBool(FfiConverterPrimitive):
    @classmethod
    def check(cls, value):
        return not not value

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.readU8())

    @classmethod
    def writeUnchecked(cls, value, buf):
        buf.writeU8(value)

    @staticmethod
    def lift(value):
        return value != 0

class FfiConverterString:
    @staticmethod
    def check(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.readI32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8Bytes = buf.read(size)
        return utf8Bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        value = FfiConverterString.check(value)
        utf8Bytes = value.encode("utf-8")
        buf.writeI32(len(utf8Bytes))
        buf.write(utf8Bytes)

    @staticmethod
    def lift(buf):
        with buf.consumeWithStream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        value = FfiConverterString.check(value)
        with RustBuffer.allocWithBuilder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()



class Client:
    _pointer: ctypes.c_void_p
    def __init__(self, db_name: "str",endpoint: "str"):
        
        
        self._pointer = rust_call(_UniFFILib.uniffi_client_fn_constructor_client_new,
        FfiConverterString.lower(db_name),
        FfiConverterString.lower(endpoint))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_client_fn_free_client, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def set_callback(self, callback: "typing.Optional[Callback]"):
        
        rust_call(_UniFFILib.uniffi_client_fn_method_client_set_callback,self._pointer,
        FfiConverterOptionalCallbackInterfaceCallback.lower(callback))







    def set_uploader(self, uploader: "typing.Optional[Uploader]"):
        
        rust_call(_UniFFILib.uniffi_client_fn_method_client_set_uploader,self._pointer,
        FfiConverterOptionalCallbackInterfaceUploader.lower(uploader))







    def prepare(self, ):
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_prepare,self._pointer,)







    def attach(self, info: "AuthInfo"):
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_attach,self._pointer,
        FfiConverterTypeAuthInfo.lower(info))







    def app_active(self, ):
        rust_call(_UniFFILib.uniffi_client_fn_method_client_app_active,self._pointer,)







    def app_deactivate(self, ):
        rust_call(_UniFFILib.uniffi_client_fn_method_client_app_deactivate,self._pointer,)







    def logout(self, ):
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_logout,self._pointer,)







    def run_loop(self, ):
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_run_loop,self._pointer,)







    def shutdown(self, ):
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_shutdown,self._pointer,)







    def get_network_state(self, ) -> "NetworkState":
        return FfiConverterTypeNetworkState.lift(
            rust_call(_UniFFILib.uniffi_client_fn_method_client_get_network_state,self._pointer,)
        )






    def get_topics_knock_count(self, ) -> "int":
        return FfiConverterUInt32.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_get_topics_knock_count,self._pointer,)
        )






    def get_conversations_count(self, ) -> "int":
        return FfiConverterUInt32.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_get_conversations_count,self._pointer,)
        )






    def get_conversation(self, topic_id: "str") -> "Conversation":
        
        return FfiConverterTypeConversation.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_get_conversation,self._pointer,
        FfiConverterString.lower(topic_id))
        )






    def remove_conversation(self, topic_id: "str"):
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_remove_conversation,self._pointer,
        FfiConverterString.lower(topic_id))







    def set_conversation_sticky(self, topic_id: "str",sticky: "bool"):
        
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_set_conversation_sticky,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterBool.lower(sticky))







    def set_conversation_mute(self, topic_id: "str",mute: "bool"):
        
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_set_conversation_mute,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterBool.lower(mute))







    def set_conversation_read(self, topic_id: "str"):
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_set_conversation_read,self._pointer,
        FfiConverterString.lower(topic_id))







    def get_conversations(self, updated_at: "str",limit: "int") -> "ListConversationResult":
        
        
        return FfiConverterTypeListConversationResult.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_get_conversations,self._pointer,
        FfiConverterString.lower(updated_at),
        FfiConverterUInt32.lower(limit))
        )






    def sync_conversations(self, without_cache: "bool"):
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_sync_conversations,self._pointer,
        FfiConverterBool.lower(without_cache))







    def get_topic(self, topic_id: "str") -> "Topic":
        
        return FfiConverterTypeTopic.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_get_topic,self._pointer,
        FfiConverterString.lower(topic_id))
        )






    def get_topic_admins(self, topic_id: "str") -> "typing.List[User]":
        
        return FfiConverterSequenceTypeUser.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_get_topic_admins,self._pointer,
        FfiConverterString.lower(topic_id))
        )






    def get_topic_owner(self, topic_id: "str") -> "User":
        
        return FfiConverterTypeUser.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_get_topic_owner,self._pointer,
        FfiConverterString.lower(topic_id))
        )






    def get_topic_members(self, topic_id: "str",updated_at: "str",limit: "int") -> "ListUserResult":
        
        
        
        return FfiConverterTypeListUserResult.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_get_topic_members,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterString.lower(updated_at),
        FfiConverterUInt32.lower(limit))
        )






    def get_chat_logs_desc(self, topic_id: "str",start_seq: "int",end_seq: "int") -> "ListChatLogResult":
        
        
        
        return FfiConverterTypeListChatLogResult.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_get_chat_logs_desc,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterUInt64.lower(start_seq),
        FfiConverterUInt64.lower(end_seq))
        )






    def get_chat_log(self, topic_id: "str",id: "str") -> "ChatLog":
        
        
        return FfiConverterTypeChatLog.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_get_chat_log,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterString.lower(id))
        )






    def search_chat_log(self, topic_id: "str",sender_id: "str",keyword: "str") -> "typing.List[ChatLog]":
        
        
        
        return FfiConverterSequenceTypeChatLog.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_search_chat_log,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterString.lower(sender_id),
        FfiConverterString.lower(keyword))
        )






    def get_topic_knocks(self, topic_id: "str") -> "typing.List[TopicKnock]":
        
        return FfiConverterSequenceTypeTopicKnock.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_get_topic_knocks,self._pointer,
        FfiConverterString.lower(topic_id))
        )






    def create_topic(self, name: "str",icon: "str",members: "typing.List[str]") -> "Topic":
        
        
        
        return FfiConverterTypeTopic.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_create_topic,self._pointer,
        FfiConverterString.lower(name),
        FfiConverterString.lower(icon),
        FfiConverterSequenceString.lower(members))
        )






    def create_chat(self, user_id: "str") -> "Topic":
        
        return FfiConverterTypeTopic.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_create_chat,self._pointer,
        FfiConverterString.lower(user_id))
        )






    def update_topic(self, topic_id: "str",name: "str",icon: "str"):
        
        
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_update_topic,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterString.lower(name),
        FfiConverterString.lower(icon))







    def update_topic_notice(self, topic_id: "str",text: "str"):
        
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_update_topic_notice,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterString.lower(text))







    def silent_topic(self, topic_id: "str",duration: "str"):
        
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_silent_topic,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterString.lower(duration))







    def silent_topic_member(self, topic_id: "str",user_id: "str",duration: "str"):
        
        
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_silent_topic_member,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterString.lower(user_id),
        FfiConverterString.lower(duration))







    def add_topic_admin(self, topic_id: "str",user_id: "str"):
        
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_add_topic_admin,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterString.lower(user_id))







    def remove_topic_admin(self, topic_id: "str",user_id: "str"):
        
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_remove_topic_admin,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterString.lower(user_id))







    def transfer_topic(self, topic_id: "str",user_id: "str"):
        
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_transfer_topic,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterString.lower(user_id))







    def quit_topic(self, topic_id: "str"):
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_quit_topic,self._pointer,
        FfiConverterString.lower(topic_id))







    def dismiss_topic(self, topic_id: "str"):
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_dismiss_topic,self._pointer,
        FfiConverterString.lower(topic_id))







    def join_topic(self, topic_id: "str",source: "str",message: "str"):
        
        
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_join_topic,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterString.lower(source),
        FfiConverterString.lower(message))







    def accept_topic_join(self, topic_id: "str",user_id: "str",memo: "str"):
        
        
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_accept_topic_join,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterString.lower(user_id),
        FfiConverterString.lower(memo))







    def decline_topic_join(self, topic_id: "str",user_id: "str",message: "str"):
        
        
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_decline_topic_join,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterString.lower(user_id),
        FfiConverterString.lower(message))







    def invite_topic_member(self, topic_id: "str",user_id: "str"):
        
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_invite_topic_member,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterString.lower(user_id))







    def remove_topic_member(self, topic_id: "str",user_id: "str"):
        
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_remove_topic_member,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterString.lower(user_id))







    def clean_topic_history(self, topic_id: "str",sync: "bool"):
        
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_clean_topic_history,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterBool.lower(sync))







    def remove_messages(self, topic_id: "str",chat_ids: "typing.List[str]",sync: "bool"):
        
        
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_remove_messages,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterSequenceString.lower(chat_ids),
        FfiConverterBool.lower(sync))







    def get_user(self, user_id: "str") -> "User":
        
        return FfiConverterTypeUser.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_get_user,self._pointer,
        FfiConverterString.lower(user_id))
        )






    def set_user_remark(self, user_id: "str",remark: "str"):
        
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_set_user_remark,self._pointer,
        FfiConverterString.lower(user_id),
        FfiConverterString.lower(remark))







    def set_user_star(self, user_id: "str",star: "bool"):
        
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_set_user_star,self._pointer,
        FfiConverterString.lower(user_id),
        FfiConverterBool.lower(star))







    def set_user_block(self, user_id: "str",block: "bool"):
        
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_set_user_block,self._pointer,
        FfiConverterString.lower(user_id),
        FfiConverterBool.lower(block))







    def set_allow_guest_chat(self, allow: "bool"):
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_set_allow_guest_chat,self._pointer,
        FfiConverterBool.lower(allow))







    def do_typing(self, topic_id: "str") -> "str":
        
        return FfiConverterString.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_do_typing,self._pointer,
        FfiConverterString.lower(topic_id))
        )






    def do_recall(self, topic_id: "str",chat_id: "str") -> "str":
        
        
        return FfiConverterString.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_do_recall,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterString.lower(chat_id))
        )






    def do_send_text(self, topic_id: "str",text: "str",mentions: "typing.Optional[typing.List[str]]",reply_id: "typing.Optional[str]") -> "str":
        
        
        
        
        return FfiConverterString.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_do_send_text,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterString.lower(text),
        FfiConverterOptionalSequenceString.lower(mentions),
        FfiConverterOptionalString.lower(reply_id))
        )






    def do_send_image(self, topic_id: "str",url_or_data: "str",mentions: "typing.Optional[typing.List[str]]",reply_id: "typing.Optional[str]") -> "str":
        
        
        
        
        return FfiConverterString.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_do_send_image,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterString.lower(url_or_data),
        FfiConverterOptionalSequenceString.lower(mentions),
        FfiConverterOptionalString.lower(reply_id))
        )






    def do_send_voice(self, topic_id: "str",url_or_data: "str",duration: "str",mentions: "typing.Optional[typing.List[str]]",reply_id: "typing.Optional[str]") -> "str":
        
        
        
        
        
        return FfiConverterString.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_do_send_voice,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterString.lower(url_or_data),
        FfiConverterString.lower(duration),
        FfiConverterOptionalSequenceString.lower(mentions),
        FfiConverterOptionalString.lower(reply_id))
        )






    def do_send_video(self, topic_id: "str",url: "str",thumbnail: "str",duration: "str",mentions: "typing.Optional[typing.List[str]]",reply_id: "typing.Optional[str]") -> "str":
        
        
        
        
        
        
        return FfiConverterString.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_do_send_video,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterString.lower(url),
        FfiConverterString.lower(thumbnail),
        FfiConverterString.lower(duration),
        FfiConverterOptionalSequenceString.lower(mentions),
        FfiConverterOptionalString.lower(reply_id))
        )






    def do_send_file(self, topic_id: "str",url_or_data: "str",filename: "str",size: "int",mentions: "typing.Optional[typing.List[str]]",reply_id: "typing.Optional[str]") -> "str":
        
        
        
        
        
        
        return FfiConverterString.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_do_send_file,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterString.lower(url_or_data),
        FfiConverterString.lower(filename),
        FfiConverterUInt64.lower(size),
        FfiConverterOptionalSequenceString.lower(mentions),
        FfiConverterOptionalString.lower(reply_id))
        )






    def do_send_location(self, topic_id: "str",latitude: "str",longitude: "str",address: "str",mentions: "typing.Optional[typing.List[str]]",reply_id: "typing.Optional[str]") -> "str":
        
        
        
        
        
        
        return FfiConverterString.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_do_send_location,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterString.lower(latitude),
        FfiConverterString.lower(longitude),
        FfiConverterString.lower(address),
        FfiConverterOptionalSequenceString.lower(mentions),
        FfiConverterOptionalString.lower(reply_id))
        )






    def do_send_link(self, topic_id: "str",url: "str",mentions: "typing.Optional[typing.List[str]]",reply_id: "typing.Optional[str]") -> "str":
        
        
        
        
        return FfiConverterString.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_do_send_link,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterString.lower(url),
        FfiConverterOptionalSequenceString.lower(mentions),
        FfiConverterOptionalString.lower(reply_id))
        )






    def do_send_invite(self, topic_id: "str",mentions: "typing.List[str]",message: "typing.Optional[str]") -> "str":
        
        
        
        return FfiConverterString.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_do_send_invite,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterSequenceString.lower(mentions),
        FfiConverterOptionalString.lower(message))
        )






    def do_send(self, topic_id: "str",content: "Content") -> "str":
        
        
        return FfiConverterString.lift(
            rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_do_send,self._pointer,
        FfiConverterString.lower(topic_id),
        FfiConverterTypeContent.lower(content))
        )






    def upload(self, uploader_url: "typing.Optional[str]",local_file_path: "str",key: "str",is_private: "bool"):
        
        
        
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_upload,self._pointer,
        FfiConverterOptionalString.lower(uploader_url),
        FfiConverterString.lower(local_file_path),
        FfiConverterString.lower(key),
        FfiConverterBool.lower(is_private))







    def download(self, file_url: "str",save_to: "str",key: "str"):
        
        
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_download,self._pointer,
        FfiConverterString.lower(file_url),
        FfiConverterString.lower(save_to),
        FfiConverterString.lower(key))







    def cancel_download(self, file_url: "str",key: "str"):
        
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_cancel_download,self._pointer,
        FfiConverterString.lower(file_url),
        FfiConverterString.lower(key))







    def cancel_upload(self, local_file_path: "str",key: "str"):
        
        
        rust_call_with_error(
    FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_method_client_cancel_upload,self._pointer,
        FfiConverterString.lower(local_file_path),
        FfiConverterString.lower(key))







class FfiConverterTypeClient:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Client):
            raise TypeError("Expected Client instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Client._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer


class AuthInfo:

    def __init__(self, endpoint, user_id, avatar, name, token):
        self.endpoint = endpoint
        self.user_id = user_id
        self.avatar = avatar
        self.name = name
        self.token = token

    def __str__(self):
        return "AuthInfo(endpoint={}, user_id={}, avatar={}, name={}, token={})".format(self.endpoint, self.user_id, self.avatar, self.name, self.token)

    def __eq__(self, other):
        if self.endpoint != other.endpoint:
            return False
        if self.user_id != other.user_id:
            return False
        if self.avatar != other.avatar:
            return False
        if self.name != other.name:
            return False
        if self.token != other.token:
            return False
        return True

class FfiConverterTypeAuthInfo(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return AuthInfo(
            endpoint=FfiConverterString.read(buf),
            user_id=FfiConverterString.read(buf),
            avatar=FfiConverterString.read(buf),
            name=FfiConverterString.read(buf),
            token=FfiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterString.write(value.endpoint, buf)
        FfiConverterString.write(value.user_id, buf)
        FfiConverterString.write(value.avatar, buf)
        FfiConverterString.write(value.name, buf)
        FfiConverterString.write(value.token, buf)


class ChatLog:

    def __init__(self, topic_id, id, seq, created_at, sender_id, content, read, recall, status, cached_at):
        self.topic_id = topic_id
        self.id = id
        self.seq = seq
        self.created_at = created_at
        self.sender_id = sender_id
        self.content = content
        self.read = read
        self.recall = recall
        self.status = status
        self.cached_at = cached_at

    def __str__(self):
        return "ChatLog(topic_id={}, id={}, seq={}, created_at={}, sender_id={}, content={}, read={}, recall={}, status={}, cached_at={})".format(self.topic_id, self.id, self.seq, self.created_at, self.sender_id, self.content, self.read, self.recall, self.status, self.cached_at)

    def __eq__(self, other):
        if self.topic_id != other.topic_id:
            return False
        if self.id != other.id:
            return False
        if self.seq != other.seq:
            return False
        if self.created_at != other.created_at:
            return False
        if self.sender_id != other.sender_id:
            return False
        if self.content != other.content:
            return False
        if self.read != other.read:
            return False
        if self.recall != other.recall:
            return False
        if self.status != other.status:
            return False
        if self.cached_at != other.cached_at:
            return False
        return True

class FfiConverterTypeChatLog(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ChatLog(
            topic_id=FfiConverterString.read(buf),
            id=FfiConverterString.read(buf),
            seq=FfiConverterUInt64.read(buf),
            created_at=FfiConverterString.read(buf),
            sender_id=FfiConverterString.read(buf),
            content=FfiConverterTypeContent.read(buf),
            read=FfiConverterBool.read(buf),
            recall=FfiConverterBool.read(buf),
            status=FfiConverterUInt32.read(buf),
            cached_at=FfiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterString.write(value.topic_id, buf)
        FfiConverterString.write(value.id, buf)
        FfiConverterUInt64.write(value.seq, buf)
        FfiConverterString.write(value.created_at, buf)
        FfiConverterString.write(value.sender_id, buf)
        FfiConverterTypeContent.write(value.content, buf)
        FfiConverterBool.write(value.read, buf)
        FfiConverterBool.write(value.recall, buf)
        FfiConverterUInt32.write(value.status, buf)
        FfiConverterString.write(value.cached_at, buf)


class Content:

    def __init__(self, type, encrypted, checksum, text, placeholder, thumbnail, duration, size, width, height, mentions, reply, created_at):
        self.type = type
        self.encrypted = encrypted
        self.checksum = checksum
        self.text = text
        self.placeholder = placeholder
        self.thumbnail = thumbnail
        self.duration = duration
        self.size = size
        self.width = width
        self.height = height
        self.mentions = mentions
        self.reply = reply
        self.created_at = created_at

    def __str__(self):
        return "Content(type={}, encrypted={}, checksum={}, text={}, placeholder={}, thumbnail={}, duration={}, size={}, width={}, height={}, mentions={}, reply={}, created_at={})".format(self.type, self.encrypted, self.checksum, self.text, self.placeholder, self.thumbnail, self.duration, self.size, self.width, self.height, self.mentions, self.reply, self.created_at)

    def __eq__(self, other):
        if self.type != other.type:
            return False
        if self.encrypted != other.encrypted:
            return False
        if self.checksum != other.checksum:
            return False
        if self.text != other.text:
            return False
        if self.placeholder != other.placeholder:
            return False
        if self.thumbnail != other.thumbnail:
            return False
        if self.duration != other.duration:
            return False
        if self.size != other.size:
            return False
        if self.width != other.width:
            return False
        if self.height != other.height:
            return False
        if self.mentions != other.mentions:
            return False
        if self.reply != other.reply:
            return False
        if self.created_at != other.created_at:
            return False
        return True

class FfiConverterTypeContent(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Content(
            type=FfiConverterString.read(buf),
            encrypted=FfiConverterBool.read(buf),
            checksum=FfiConverterUInt32.read(buf),
            text=FfiConverterString.read(buf),
            placeholder=FfiConverterString.read(buf),
            thumbnail=FfiConverterString.read(buf),
            duration=FfiConverterString.read(buf),
            size=FfiConverterUInt64.read(buf),
            width=FfiConverterFloat.read(buf),
            height=FfiConverterFloat.read(buf),
            mentions=FfiConverterSequenceString.read(buf),
            reply=FfiConverterString.read(buf),
            created_at=FfiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterString.write(value.type, buf)
        FfiConverterBool.write(value.encrypted, buf)
        FfiConverterUInt32.write(value.checksum, buf)
        FfiConverterString.write(value.text, buf)
        FfiConverterString.write(value.placeholder, buf)
        FfiConverterString.write(value.thumbnail, buf)
        FfiConverterString.write(value.duration, buf)
        FfiConverterUInt64.write(value.size, buf)
        FfiConverterFloat.write(value.width, buf)
        FfiConverterFloat.write(value.height, buf)
        FfiConverterSequenceString.write(value.mentions, buf)
        FfiConverterString.write(value.reply, buf)
        FfiConverterString.write(value.created_at, buf)


class Conversation:

    def __init__(self, owner_id, topic_id, last_seq, last_read_seq, multiple, attendee, name, icon, sticky, mute, source, unread, last_sender_id, last_message, last_message_at, cached_at):
        self.owner_id = owner_id
        self.topic_id = topic_id
        self.last_seq = last_seq
        self.last_read_seq = last_read_seq
        self.multiple = multiple
        self.attendee = attendee
        self.name = name
        self.icon = icon
        self.sticky = sticky
        self.mute = mute
        self.source = source
        self.unread = unread
        self.last_sender_id = last_sender_id
        self.last_message = last_message
        self.last_message_at = last_message_at
        self.cached_at = cached_at

    def __str__(self):
        return "Conversation(owner_id={}, topic_id={}, last_seq={}, last_read_seq={}, multiple={}, attendee={}, name={}, icon={}, sticky={}, mute={}, source={}, unread={}, last_sender_id={}, last_message={}, last_message_at={}, cached_at={})".format(self.owner_id, self.topic_id, self.last_seq, self.last_read_seq, self.multiple, self.attendee, self.name, self.icon, self.sticky, self.mute, self.source, self.unread, self.last_sender_id, self.last_message, self.last_message_at, self.cached_at)

    def __eq__(self, other):
        if self.owner_id != other.owner_id:
            return False
        if self.topic_id != other.topic_id:
            return False
        if self.last_seq != other.last_seq:
            return False
        if self.last_read_seq != other.last_read_seq:
            return False
        if self.multiple != other.multiple:
            return False
        if self.attendee != other.attendee:
            return False
        if self.name != other.name:
            return False
        if self.icon != other.icon:
            return False
        if self.sticky != other.sticky:
            return False
        if self.mute != other.mute:
            return False
        if self.source != other.source:
            return False
        if self.unread != other.unread:
            return False
        if self.last_sender_id != other.last_sender_id:
            return False
        if self.last_message != other.last_message:
            return False
        if self.last_message_at != other.last_message_at:
            return False
        if self.cached_at != other.cached_at:
            return False
        return True

class FfiConverterTypeConversation(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Conversation(
            owner_id=FfiConverterString.read(buf),
            topic_id=FfiConverterString.read(buf),
            last_seq=FfiConverterUInt64.read(buf),
            last_read_seq=FfiConverterUInt64.read(buf),
            multiple=FfiConverterBool.read(buf),
            attendee=FfiConverterString.read(buf),
            name=FfiConverterString.read(buf),
            icon=FfiConverterString.read(buf),
            sticky=FfiConverterBool.read(buf),
            mute=FfiConverterBool.read(buf),
            source=FfiConverterString.read(buf),
            unread=FfiConverterUInt64.read(buf),
            last_sender_id=FfiConverterString.read(buf),
            last_message=FfiConverterOptionalTypeContent.read(buf),
            last_message_at=FfiConverterString.read(buf),
            cached_at=FfiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterString.write(value.owner_id, buf)
        FfiConverterString.write(value.topic_id, buf)
        FfiConverterUInt64.write(value.last_seq, buf)
        FfiConverterUInt64.write(value.last_read_seq, buf)
        FfiConverterBool.write(value.multiple, buf)
        FfiConverterString.write(value.attendee, buf)
        FfiConverterString.write(value.name, buf)
        FfiConverterString.write(value.icon, buf)
        FfiConverterBool.write(value.sticky, buf)
        FfiConverterBool.write(value.mute, buf)
        FfiConverterString.write(value.source, buf)
        FfiConverterUInt64.write(value.unread, buf)
        FfiConverterString.write(value.last_sender_id, buf)
        FfiConverterOptionalTypeContent.write(value.last_message, buf)
        FfiConverterString.write(value.last_message_at, buf)
        FfiConverterString.write(value.cached_at, buf)


class ListChatLogResult:

    def __init__(self, has_more, updated_at, last_seq, items):
        self.has_more = has_more
        self.updated_at = updated_at
        self.last_seq = last_seq
        self.items = items

    def __str__(self):
        return "ListChatLogResult(has_more={}, updated_at={}, last_seq={}, items={})".format(self.has_more, self.updated_at, self.last_seq, self.items)

    def __eq__(self, other):
        if self.has_more != other.has_more:
            return False
        if self.updated_at != other.updated_at:
            return False
        if self.last_seq != other.last_seq:
            return False
        if self.items != other.items:
            return False
        return True

class FfiConverterTypeListChatLogResult(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ListChatLogResult(
            has_more=FfiConverterBool.read(buf),
            updated_at=FfiConverterString.read(buf),
            last_seq=FfiConverterUInt64.read(buf),
            items=FfiConverterSequenceTypeChatLog.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterBool.write(value.has_more, buf)
        FfiConverterString.write(value.updated_at, buf)
        FfiConverterUInt64.write(value.last_seq, buf)
        FfiConverterSequenceTypeChatLog.write(value.items, buf)


class ListConversationResult:

    def __init__(self, has_more, updated_at, items):
        self.has_more = has_more
        self.updated_at = updated_at
        self.items = items

    def __str__(self):
        return "ListConversationResult(has_more={}, updated_at={}, items={})".format(self.has_more, self.updated_at, self.items)

    def __eq__(self, other):
        if self.has_more != other.has_more:
            return False
        if self.updated_at != other.updated_at:
            return False
        if self.items != other.items:
            return False
        return True

class FfiConverterTypeListConversationResult(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ListConversationResult(
            has_more=FfiConverterBool.read(buf),
            updated_at=FfiConverterString.read(buf),
            items=FfiConverterSequenceTypeConversation.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterBool.write(value.has_more, buf)
        FfiConverterString.write(value.updated_at, buf)
        FfiConverterSequenceTypeConversation.write(value.items, buf)


class ListUserResult:

    def __init__(self, has_more, updated_at, items, removed):
        self.has_more = has_more
        self.updated_at = updated_at
        self.items = items
        self.removed = removed

    def __str__(self):
        return "ListUserResult(has_more={}, updated_at={}, items={}, removed={})".format(self.has_more, self.updated_at, self.items, self.removed)

    def __eq__(self, other):
        if self.has_more != other.has_more:
            return False
        if self.updated_at != other.updated_at:
            return False
        if self.items != other.items:
            return False
        if self.removed != other.removed:
            return False
        return True

class FfiConverterTypeListUserResult(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ListUserResult(
            has_more=FfiConverterBool.read(buf),
            updated_at=FfiConverterString.read(buf),
            items=FfiConverterSequenceTypeUser.read(buf),
            removed=FfiConverterSequenceString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterBool.write(value.has_more, buf)
        FfiConverterString.write(value.updated_at, buf)
        FfiConverterSequenceTypeUser.write(value.items, buf)
        FfiConverterSequenceString.write(value.removed, buf)


class Topic:

    def __init__(self, id, name, icon, remark, owner_id, attendee_id, admins, members, last_seq, multiple, source, private, created_at, updated_at, notice, silent, cached_at):
        self.id = id
        self.name = name
        self.icon = icon
        self.remark = remark
        self.owner_id = owner_id
        self.attendee_id = attendee_id
        self.admins = admins
        self.members = members
        self.last_seq = last_seq
        self.multiple = multiple
        self.source = source
        self.private = private
        self.created_at = created_at
        self.updated_at = updated_at
        self.notice = notice
        self.silent = silent
        self.cached_at = cached_at

    def __str__(self):
        return "Topic(id={}, name={}, icon={}, remark={}, owner_id={}, attendee_id={}, admins={}, members={}, last_seq={}, multiple={}, source={}, private={}, created_at={}, updated_at={}, notice={}, silent={}, cached_at={})".format(self.id, self.name, self.icon, self.remark, self.owner_id, self.attendee_id, self.admins, self.members, self.last_seq, self.multiple, self.source, self.private, self.created_at, self.updated_at, self.notice, self.silent, self.cached_at)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        if self.name != other.name:
            return False
        if self.icon != other.icon:
            return False
        if self.remark != other.remark:
            return False
        if self.owner_id != other.owner_id:
            return False
        if self.attendee_id != other.attendee_id:
            return False
        if self.admins != other.admins:
            return False
        if self.members != other.members:
            return False
        if self.last_seq != other.last_seq:
            return False
        if self.multiple != other.multiple:
            return False
        if self.source != other.source:
            return False
        if self.private != other.private:
            return False
        if self.created_at != other.created_at:
            return False
        if self.updated_at != other.updated_at:
            return False
        if self.notice != other.notice:
            return False
        if self.silent != other.silent:
            return False
        if self.cached_at != other.cached_at:
            return False
        return True

class FfiConverterTypeTopic(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Topic(
            id=FfiConverterString.read(buf),
            name=FfiConverterString.read(buf),
            icon=FfiConverterString.read(buf),
            remark=FfiConverterString.read(buf),
            owner_id=FfiConverterString.read(buf),
            attendee_id=FfiConverterString.read(buf),
            admins=FfiConverterSequenceString.read(buf),
            members=FfiConverterUInt32.read(buf),
            last_seq=FfiConverterUInt64.read(buf),
            multiple=FfiConverterBool.read(buf),
            source=FfiConverterString.read(buf),
            private=FfiConverterBool.read(buf),
            created_at=FfiConverterString.read(buf),
            updated_at=FfiConverterString.read(buf),
            notice=FfiConverterOptionalTypeTopicNotice.read(buf),
            silent=FfiConverterBool.read(buf),
            cached_at=FfiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterString.write(value.id, buf)
        FfiConverterString.write(value.name, buf)
        FfiConverterString.write(value.icon, buf)
        FfiConverterString.write(value.remark, buf)
        FfiConverterString.write(value.owner_id, buf)
        FfiConverterString.write(value.attendee_id, buf)
        FfiConverterSequenceString.write(value.admins, buf)
        FfiConverterUInt32.write(value.members, buf)
        FfiConverterUInt64.write(value.last_seq, buf)
        FfiConverterBool.write(value.multiple, buf)
        FfiConverterString.write(value.source, buf)
        FfiConverterBool.write(value.private, buf)
        FfiConverterString.write(value.created_at, buf)
        FfiConverterString.write(value.updated_at, buf)
        FfiConverterOptionalTypeTopicNotice.write(value.notice, buf)
        FfiConverterBool.write(value.silent, buf)
        FfiConverterString.write(value.cached_at, buf)


class TopicKnock:

    def __init__(self, created_at, updated_at, topic_id, user_id, message, source, status, admin_id):
        self.created_at = created_at
        self.updated_at = updated_at
        self.topic_id = topic_id
        self.user_id = user_id
        self.message = message
        self.source = source
        self.status = status
        self.admin_id = admin_id

    def __str__(self):
        return "TopicKnock(created_at={}, updated_at={}, topic_id={}, user_id={}, message={}, source={}, status={}, admin_id={})".format(self.created_at, self.updated_at, self.topic_id, self.user_id, self.message, self.source, self.status, self.admin_id)

    def __eq__(self, other):
        if self.created_at != other.created_at:
            return False
        if self.updated_at != other.updated_at:
            return False
        if self.topic_id != other.topic_id:
            return False
        if self.user_id != other.user_id:
            return False
        if self.message != other.message:
            return False
        if self.source != other.source:
            return False
        if self.status != other.status:
            return False
        if self.admin_id != other.admin_id:
            return False
        return True

class FfiConverterTypeTopicKnock(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TopicKnock(
            created_at=FfiConverterString.read(buf),
            updated_at=FfiConverterString.read(buf),
            topic_id=FfiConverterString.read(buf),
            user_id=FfiConverterString.read(buf),
            message=FfiConverterString.read(buf),
            source=FfiConverterString.read(buf),
            status=FfiConverterString.read(buf),
            admin_id=FfiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterString.write(value.created_at, buf)
        FfiConverterString.write(value.updated_at, buf)
        FfiConverterString.write(value.topic_id, buf)
        FfiConverterString.write(value.user_id, buf)
        FfiConverterString.write(value.message, buf)
        FfiConverterString.write(value.source, buf)
        FfiConverterString.write(value.status, buf)
        FfiConverterString.write(value.admin_id, buf)


class TopicMember:

    def __init__(self, topic_id, user_id, is_owner, is_admin, remark, silent, joined_at, cached_at):
        self.topic_id = topic_id
        self.user_id = user_id
        self.is_owner = is_owner
        self.is_admin = is_admin
        self.remark = remark
        self.silent = silent
        self.joined_at = joined_at
        self.cached_at = cached_at

    def __str__(self):
        return "TopicMember(topic_id={}, user_id={}, is_owner={}, is_admin={}, remark={}, silent={}, joined_at={}, cached_at={})".format(self.topic_id, self.user_id, self.is_owner, self.is_admin, self.remark, self.silent, self.joined_at, self.cached_at)

    def __eq__(self, other):
        if self.topic_id != other.topic_id:
            return False
        if self.user_id != other.user_id:
            return False
        if self.is_owner != other.is_owner:
            return False
        if self.is_admin != other.is_admin:
            return False
        if self.remark != other.remark:
            return False
        if self.silent != other.silent:
            return False
        if self.joined_at != other.joined_at:
            return False
        if self.cached_at != other.cached_at:
            return False
        return True

class FfiConverterTypeTopicMember(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TopicMember(
            topic_id=FfiConverterString.read(buf),
            user_id=FfiConverterString.read(buf),
            is_owner=FfiConverterBool.read(buf),
            is_admin=FfiConverterBool.read(buf),
            remark=FfiConverterString.read(buf),
            silent=FfiConverterBool.read(buf),
            joined_at=FfiConverterString.read(buf),
            cached_at=FfiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterString.write(value.topic_id, buf)
        FfiConverterString.write(value.user_id, buf)
        FfiConverterBool.write(value.is_owner, buf)
        FfiConverterBool.write(value.is_admin, buf)
        FfiConverterString.write(value.remark, buf)
        FfiConverterBool.write(value.silent, buf)
        FfiConverterString.write(value.joined_at, buf)
        FfiConverterString.write(value.cached_at, buf)


class TopicNotice:

    def __init__(self, text, publisher, updated_at):
        self.text = text
        self.publisher = publisher
        self.updated_at = updated_at

    def __str__(self):
        return "TopicNotice(text={}, publisher={}, updated_at={})".format(self.text, self.publisher, self.updated_at)

    def __eq__(self, other):
        if self.text != other.text:
            return False
        if self.publisher != other.publisher:
            return False
        if self.updated_at != other.updated_at:
            return False
        return True

class FfiConverterTypeTopicNotice(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TopicNotice(
            text=FfiConverterString.read(buf),
            publisher=FfiConverterString.read(buf),
            updated_at=FfiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterString.write(value.text, buf)
        FfiConverterString.write(value.publisher, buf)
        FfiConverterString.write(value.updated_at, buf)


class User:

    def __init__(self, user_id, name, avatar, public_key, remark, is_contact, is_star, is_blocked, locale, city, country, source, gender, created_at, cached_at):
        self.user_id = user_id
        self.name = name
        self.avatar = avatar
        self.public_key = public_key
        self.remark = remark
        self.is_contact = is_contact
        self.is_star = is_star
        self.is_blocked = is_blocked
        self.locale = locale
        self.city = city
        self.country = country
        self.source = source
        self.gender = gender
        self.created_at = created_at
        self.cached_at = cached_at

    def __str__(self):
        return "User(user_id={}, name={}, avatar={}, public_key={}, remark={}, is_contact={}, is_star={}, is_blocked={}, locale={}, city={}, country={}, source={}, gender={}, created_at={}, cached_at={})".format(self.user_id, self.name, self.avatar, self.public_key, self.remark, self.is_contact, self.is_star, self.is_blocked, self.locale, self.city, self.country, self.source, self.gender, self.created_at, self.cached_at)

    def __eq__(self, other):
        if self.user_id != other.user_id:
            return False
        if self.name != other.name:
            return False
        if self.avatar != other.avatar:
            return False
        if self.public_key != other.public_key:
            return False
        if self.remark != other.remark:
            return False
        if self.is_contact != other.is_contact:
            return False
        if self.is_star != other.is_star:
            return False
        if self.is_blocked != other.is_blocked:
            return False
        if self.locale != other.locale:
            return False
        if self.city != other.city:
            return False
        if self.country != other.country:
            return False
        if self.source != other.source:
            return False
        if self.gender != other.gender:
            return False
        if self.created_at != other.created_at:
            return False
        if self.cached_at != other.cached_at:
            return False
        return True

class FfiConverterTypeUser(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return User(
            user_id=FfiConverterString.read(buf),
            name=FfiConverterString.read(buf),
            avatar=FfiConverterString.read(buf),
            public_key=FfiConverterString.read(buf),
            remark=FfiConverterString.read(buf),
            is_contact=FfiConverterBool.read(buf),
            is_star=FfiConverterBool.read(buf),
            is_blocked=FfiConverterBool.read(buf),
            locale=FfiConverterString.read(buf),
            city=FfiConverterString.read(buf),
            country=FfiConverterString.read(buf),
            source=FfiConverterString.read(buf),
            gender=FfiConverterString.read(buf),
            created_at=FfiConverterString.read(buf),
            cached_at=FfiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterString.write(value.user_id, buf)
        FfiConverterString.write(value.name, buf)
        FfiConverterString.write(value.avatar, buf)
        FfiConverterString.write(value.public_key, buf)
        FfiConverterString.write(value.remark, buf)
        FfiConverterBool.write(value.is_contact, buf)
        FfiConverterBool.write(value.is_star, buf)
        FfiConverterBool.write(value.is_blocked, buf)
        FfiConverterString.write(value.locale, buf)
        FfiConverterString.write(value.city, buf)
        FfiConverterString.write(value.country, buf)
        FfiConverterString.write(value.source, buf)
        FfiConverterString.write(value.gender, buf)
        FfiConverterString.write(value.created_at, buf)
        FfiConverterString.write(value.cached_at, buf)


# ClientError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class ClientError(Exception):
    pass

UniFFITempClientError = ClientError

class ClientError:  # type: ignore
    class InvalidPassword(UniFFITempClientError):
        def __repr__(self):
            return "ClientError.InvalidPassword({})".format(repr(str(self)))
    UniFFITempClientError.InvalidPassword = InvalidPassword  # type: ignore
    class TokenExpired(UniFFITempClientError):
        def __repr__(self):
            return "ClientError.TokenExpired({})".format(repr(str(self)))
    UniFFITempClientError.TokenExpired = TokenExpired  # type: ignore
    class NetworkBroken(UniFFITempClientError):
        def __repr__(self):
            return "ClientError.NetworkBroken({})".format(repr(str(self)))
    UniFFITempClientError.NetworkBroken = NetworkBroken  # type: ignore
    class TopicNotFound(UniFFITempClientError):
        def __repr__(self):
            return "ClientError.TopicNotFound({})".format(repr(str(self)))
    UniFFITempClientError.TopicNotFound = TopicNotFound  # type: ignore
    class TopicKnockNotFound(UniFFITempClientError):
        def __repr__(self):
            return "ClientError.TopicKnockNotFound({})".format(repr(str(self)))
    UniFFITempClientError.TopicKnockNotFound = TopicKnockNotFound  # type: ignore
    class ChatLogNotFound(UniFFITempClientError):
        def __repr__(self):
            return "ClientError.ChatLogNotFound({})".format(repr(str(self)))
    UniFFITempClientError.ChatLogNotFound = ChatLogNotFound  # type: ignore
    class InvalidContent(UniFFITempClientError):
        def __repr__(self):
            return "ClientError.InvalidContent({})".format(repr(str(self)))
    UniFFITempClientError.InvalidContent = InvalidContent  # type: ignore
    class ConversationNotFound(UniFFITempClientError):
        def __repr__(self):
            return "ClientError.ConversationNotFound({})".format(repr(str(self)))
    UniFFITempClientError.ConversationNotFound = ConversationNotFound  # type: ignore
    class UserNotFound(UniFFITempClientError):
        def __repr__(self):
            return "ClientError.UserNotFound({})".format(repr(str(self)))
    UniFFITempClientError.UserNotFound = UserNotFound  # type: ignore
    class KickOffByOtherClient(UniFFITempClientError):
        def __repr__(self):
            return "ClientError.KickOffByOtherClient({})".format(repr(str(self)))
    UniFFITempClientError.KickOffByOtherClient = KickOffByOtherClient  # type: ignore
    class DbMigrateError(UniFFITempClientError):
        def __repr__(self):
            return "ClientError.DbMigrateError({})".format(repr(str(self)))
    UniFFITempClientError.DbMigrateError = DbMigrateError  # type: ignore
    class DbPoolError(UniFFITempClientError):
        def __repr__(self):
            return "ClientError.DbPoolError({})".format(repr(str(self)))
    UniFFITempClientError.DbPoolError = DbPoolError  # type: ignore
    class DbError(UniFFITempClientError):
        def __repr__(self):
            return "ClientError.DbError({})".format(repr(str(self)))
    UniFFITempClientError.DbError = DbError  # type: ignore
    class StdError(UniFFITempClientError):
        def __repr__(self):
            return "ClientError.StdError({})".format(repr(str(self)))
    UniFFITempClientError.StdError = StdError  # type: ignore
    class WebsocketError(UniFFITempClientError):
        def __repr__(self):
            return "ClientError.WebsocketError({})".format(repr(str(self)))
    UniFFITempClientError.WebsocketError = WebsocketError  # type: ignore
    class HttpError(UniFFITempClientError):
        def __repr__(self):
            return "ClientError.HttpError({})".format(repr(str(self)))
    UniFFITempClientError.HttpError = HttpError  # type: ignore
    class JsonError(UniFFITempClientError):
        def __repr__(self):
            return "ClientError.JsonError({})".format(repr(str(self)))
    UniFFITempClientError.JsonError = JsonError  # type: ignore
    class SendCtrlMessageError(UniFFITempClientError):
        def __repr__(self):
            return "ClientError.SendCtrlMessageError({})".format(repr(str(self)))
    UniFFITempClientError.SendCtrlMessageError = SendCtrlMessageError  # type: ignore
    class UnknownError(UniFFITempClientError):
        def __repr__(self):
            return "ClientError.UnknownError({})".format(repr(str(self)))
    UniFFITempClientError.UnknownError = UnknownError  # type: ignore

ClientError = UniFFITempClientError  # type: ignore
del UniFFITempClientError


class FfiConverterTypeClientError(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return ClientError.InvalidPassword(
                FfiConverterString.read(buf),
            )
        if variant == 2:
            return ClientError.TokenExpired(
                FfiConverterString.read(buf),
            )
        if variant == 3:
            return ClientError.NetworkBroken(
                FfiConverterString.read(buf),
            )
        if variant == 4:
            return ClientError.TopicNotFound(
                FfiConverterString.read(buf),
            )
        if variant == 5:
            return ClientError.TopicKnockNotFound(
                FfiConverterString.read(buf),
            )
        if variant == 6:
            return ClientError.ChatLogNotFound(
                FfiConverterString.read(buf),
            )
        if variant == 7:
            return ClientError.InvalidContent(
                FfiConverterString.read(buf),
            )
        if variant == 8:
            return ClientError.ConversationNotFound(
                FfiConverterString.read(buf),
            )
        if variant == 9:
            return ClientError.UserNotFound(
                FfiConverterString.read(buf),
            )
        if variant == 10:
            return ClientError.KickOffByOtherClient(
                FfiConverterString.read(buf),
            )
        if variant == 11:
            return ClientError.DbMigrateError(
                FfiConverterString.read(buf),
            )
        if variant == 12:
            return ClientError.DbPoolError(
                FfiConverterString.read(buf),
            )
        if variant == 13:
            return ClientError.DbError(
                FfiConverterString.read(buf),
            )
        if variant == 14:
            return ClientError.StdError(
                FfiConverterString.read(buf),
            )
        if variant == 15:
            return ClientError.WebsocketError(
                FfiConverterString.read(buf),
            )
        if variant == 16:
            return ClientError.HttpError(
                FfiConverterString.read(buf),
            )
        if variant == 17:
            return ClientError.JsonError(
                FfiConverterString.read(buf),
            )
        if variant == 18:
            return ClientError.SendCtrlMessageError(
                FfiConverterString.read(buf),
            )
        if variant == 19:
            return ClientError.UnknownError(
                FfiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def write(value, buf):
        if isinstance(value, ClientError.InvalidPassword):
            buf.writeI32(1)
        if isinstance(value, ClientError.TokenExpired):
            buf.writeI32(2)
        if isinstance(value, ClientError.NetworkBroken):
            buf.writeI32(3)
        if isinstance(value, ClientError.TopicNotFound):
            buf.writeI32(4)
        if isinstance(value, ClientError.TopicKnockNotFound):
            buf.writeI32(5)
        if isinstance(value, ClientError.ChatLogNotFound):
            buf.writeI32(6)
        if isinstance(value, ClientError.InvalidContent):
            buf.writeI32(7)
        if isinstance(value, ClientError.ConversationNotFound):
            buf.writeI32(8)
        if isinstance(value, ClientError.UserNotFound):
            buf.writeI32(9)
        if isinstance(value, ClientError.KickOffByOtherClient):
            buf.writeI32(10)
        if isinstance(value, ClientError.DbMigrateError):
            buf.writeI32(11)
        if isinstance(value, ClientError.DbPoolError):
            buf.writeI32(12)
        if isinstance(value, ClientError.DbError):
            buf.writeI32(13)
        if isinstance(value, ClientError.StdError):
            buf.writeI32(14)
        if isinstance(value, ClientError.WebsocketError):
            buf.writeI32(15)
        if isinstance(value, ClientError.HttpError):
            buf.writeI32(16)
        if isinstance(value, ClientError.JsonError):
            buf.writeI32(17)
        if isinstance(value, ClientError.SendCtrlMessageError):
            buf.writeI32(18)
        if isinstance(value, ClientError.UnknownError):
            buf.writeI32(19)





class NetworkState(enum.Enum):
    CONNECTING = 1
    CONNECTED = 2
    DISCONNECTED = 3
    


class FfiConverterTypeNetworkState(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return NetworkState.CONNECTING
        if variant == 2:
            return NetworkState.CONNECTED
        if variant == 3:
            return NetworkState.DISCONNECTED
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == NetworkState.CONNECTING:
            buf.writeI32(1)
        if value == NetworkState.CONNECTED:
            buf.writeI32(2)
        if value == NetworkState.DISCONNECTED:
            buf.writeI32(3)




import threading

class ConcurrentHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._left_map = {}  # type: Dict[Handle, Any]
        self._right_map = {}  # type: Dict[Any, Handle]

        self._lock = threading.Lock()
        self._current_handle = 0
        self._stride = 1


    def insert(self, obj):
        with self._lock:
            if obj in self._right_map:
                return self._right_map[obj]
            else:
                handle = self._current_handle
                self._current_handle += self._stride
                self._left_map[handle] = obj
                self._right_map[obj] = handle
                return handle

    def get(self, handle):
        with self._lock:
            return self._left_map.get(handle)

    def remove(self, handle):
        with self._lock:
            if handle in self._left_map:
                obj = self._left_map.pop(handle)
                del self._right_map[obj]
                return obj

# Magic number for the Rust proxy to call using the same mechanism as every other method,
# to free the callback once it's dropped by Rust.
IDX_CALLBACK_FREE = 0
# Return codes for callback calls
UNIFFI_CALLBACK_SUCCESS = 0
UNIFFI_CALLBACK_ERROR = 1
UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

class FfiConverterCallbackInterface:
    _handle_map = ConcurrentHandleMap()

    def __init__(self, cb):
        self._foreign_callback = cb

    def drop(self, handle):
        self.__class__._handle_map.remove(handle)

    @classmethod
    def lift(cls, handle):
        obj = cls._handle_map.get(handle)
        if not obj:
            raise InternalError("The object in the handle map has been dropped already")

        return obj

    @classmethod
    def read(cls, buf):
        handle = buf.readU64()
        cls.lift(handle)

    @classmethod
    def lower(cls, cb):
        handle = cls._handle_map.insert(cb)
        return handle

    @classmethod
    def write(cls, cb, buf):
        buf.writeU64(cls.lower(cb))

# Declaration and FfiConverters for Callback Callback Interface

class Callback:
    def on_connected(self, ):
        raise NotImplementedError

    def on_connecting(self, ):
        raise NotImplementedError

    def on_net_broken(self, reason: "str"):
        raise NotImplementedError

    def on_kickoff_by_other_client(self, reason: "str"):
        raise NotImplementedError

    def on_send_message_fail(self, topic_id: "str",chat_id: "str",code: "int"):
        raise NotImplementedError

    def on_topic_knock(self, topic_id: "str",message: "str",source: "str"):
        raise NotImplementedError

    def on_topic_knock_reject(self, user_id: "str",message: "str"):
        raise NotImplementedError

    def on_topic_join(self, topic_id: "str"):
        raise NotImplementedError

    def on_read(self, topic_id: "str"):
        raise NotImplementedError

    def on_recall(self, topic_id: "str",chat_id: "str"):
        raise NotImplementedError

    def on_typing(self, topic_id: "str",user_id: "str"):
        raise NotImplementedError

    def on_topic_message(self, topic_id: "str",message: "ChatLog"):
        raise NotImplementedError

    def on_topic_notice_updated(self, topic_id: "str",notice: "TopicNotice"):
        raise NotImplementedError

    def on_topic_member_updated(self, topic_id: "str",member: "User",is_add: "bool"):
        raise NotImplementedError

    def on_conversation_updated(self, conversations: "typing.List[Conversation]"):
        raise NotImplementedError

    def on_conversation_removed(self, topic_id: "str"):
        raise NotImplementedError

    def on_topic_kickoff(self, topic_id: "str",admin_id: "str",user_id: "str"):
        raise NotImplementedError

    def on_topic_dismissed(self, topic_id: "str",user_id: "str"):
        raise NotImplementedError

    def on_topic_silent(self, topic_id: "str",duration: "str"):
        raise NotImplementedError

    def on_topic_silent_member(self, topic_id: "str",user_id: "str",duration: "str"):
        raise NotImplementedError

    def on_download_progress(self, file_url: "str",received: "int",total: "int",key: "str"):
        raise NotImplementedError

    def on_download_done(self, file_url: "str",local_file_name: "str",size: "int",key: "str"):
        raise NotImplementedError

    def on_download_cancel(self, file_url: "str",local_file_name: "str",reason: "str",key: "str"):
        raise NotImplementedError

    def on_upload_progress(self, local_file_path: "str",received: "int",total: "int",key: "str"):
        raise NotImplementedError

    def on_upload_done(self, url: "str",local_file_path: "str",size: "int",key: "str"):
        raise NotImplementedError

    def on_upload_cancel(self, url: "str",local_file_path: "str",reason: "str",key: "str"):
        raise NotImplementedError

    

def py_foreignCallbackCallbackInterfaceCallback(handle, method, args_data, args_len, buf_ptr):
    
    def invoke_on_connected(python_callback, args_stream, buf_ptr):
        def makeCall():
            return python_callback.on_connected()

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_connecting(python_callback, args_stream, buf_ptr):
        def makeCall():
            return python_callback.on_connecting()

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_net_broken(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_net_broken(
                FfiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_kickoff_by_other_client(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_kickoff_by_other_client(
                FfiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_send_message_fail(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_send_message_fail(
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream), 
                FfiConverterUInt32.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_topic_knock(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_topic_knock(
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_topic_knock_reject(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_topic_knock_reject(
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_topic_join(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_topic_join(
                FfiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_read(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_read(
                FfiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_recall(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_recall(
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_typing(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_typing(
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_topic_message(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_topic_message(
                FfiConverterString.read(args_stream), 
                FfiConverterTypeChatLog.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_topic_notice_updated(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_topic_notice_updated(
                FfiConverterString.read(args_stream), 
                FfiConverterTypeTopicNotice.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_topic_member_updated(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_topic_member_updated(
                FfiConverterString.read(args_stream), 
                FfiConverterTypeUser.read(args_stream), 
                FfiConverterBool.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_conversation_updated(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_conversation_updated(
                FfiConverterSequenceTypeConversation.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_conversation_removed(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_conversation_removed(
                FfiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_topic_kickoff(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_topic_kickoff(
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_topic_dismissed(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_topic_dismissed(
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_topic_silent(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_topic_silent(
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_topic_silent_member(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_topic_silent_member(
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_download_progress(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_download_progress(
                FfiConverterString.read(args_stream), 
                FfiConverterUInt32.read(args_stream), 
                FfiConverterUInt32.read(args_stream), 
                FfiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_download_done(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_download_done(
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream), 
                FfiConverterUInt32.read(args_stream), 
                FfiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_download_cancel(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_download_cancel(
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_upload_progress(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_upload_progress(
                FfiConverterString.read(args_stream), 
                FfiConverterUInt32.read(args_stream), 
                FfiConverterUInt32.read(args_stream), 
                FfiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_upload_done(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_upload_done(
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream), 
                FfiConverterUInt32.read(args_stream), 
                FfiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_on_upload_cancel(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.on_upload_cancel(
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    

    cb = FfiConverterCallbackInterfaceCallback.lift(handle)
    if not cb:
        raise InternalError("No callback in handlemap; this is a Uniffi bug")

    if method == IDX_CALLBACK_FREE:
        FfiConverterCallbackInterfaceCallback.drop(handle)
        # Successfull return
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_SUCCESS

    if method == 1:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_connected(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 2:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_connecting(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 3:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_net_broken(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 4:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_kickoff_by_other_client(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 5:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_send_message_fail(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 6:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_topic_knock(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 7:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_topic_knock_reject(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 8:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_topic_join(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 9:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_read(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 10:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_recall(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 11:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_typing(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 12:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_topic_message(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 13:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_topic_notice_updated(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 14:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_topic_member_updated(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 15:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_conversation_updated(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 16:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_conversation_removed(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 17:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_topic_kickoff(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 18:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_topic_dismissed(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 19:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_topic_silent(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 20:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_topic_silent_member(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 21:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_download_progress(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 22:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_download_done(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 23:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_download_cancel(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 24:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_upload_progress(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 25:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_upload_done(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 26:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_on_upload_cancel(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    

    # This should never happen, because an out of bounds method index won't
    # ever be used. Once we can catch errors, we should return an InternalException.
    # https://github.com/mozilla/uniffi-rs/issues/351

    # An unexpected error happened.
    # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
    return UNIFFI_CALLBACK_UNEXPECTED_ERROR

# We need to keep this function reference alive:
# if they get GC'd while in use then UniFFI internals could attempt to call a function
# that is in freed memory.
# That would be...uh...bad. Yeah, that's the word. Bad.
foreignCallbackCallbackInterfaceCallback = FOREIGN_CALLBACK_T(py_foreignCallbackCallbackInterfaceCallback)
rust_call(lambda err: _UniFFILib.uniffi_client_fn_init_callback_callback(foreignCallbackCallbackInterfaceCallback, err))

# The FfiConverter which transforms the Callbacks in to Handles to pass to Rust.
FfiConverterCallbackInterfaceCallback = FfiConverterCallbackInterface(foreignCallbackCallbackInterfaceCallback)





# Declaration and FfiConverters for Uploader Callback Interface

class Uploader:
    def upload(self, local_file_path: "str",key: "str"):
        raise NotImplementedError

    def download(self, file_url: "str",save_to_local: "str",key: "str"):
        raise NotImplementedError

    def cancel_download(self, file_url: "str",key: "str"):
        raise NotImplementedError

    def cancel_upload(self, local_file_path: "str",key: "str"):
        raise NotImplementedError

    

def py_foreignCallbackCallbackInterfaceUploader(handle, method, args_data, args_len, buf_ptr):
    
    def invoke_upload(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.upload(
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_download(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.download(
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_cancel_download(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.cancel_download(
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    
    def invoke_cancel_upload(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.cancel_upload(
                FfiConverterString.read(args_stream), 
                FfiConverterString.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        return makeCallAndHandleReturn()

    

    cb = FfiConverterCallbackInterfaceUploader.lift(handle)
    if not cb:
        raise InternalError("No callback in handlemap; this is a Uniffi bug")

    if method == IDX_CALLBACK_FREE:
        FfiConverterCallbackInterfaceUploader.drop(handle)
        # Successfull return
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_SUCCESS

    if method == 1:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_upload(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 2:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_download(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 3:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_cancel_download(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    if method == 4:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_cancel_upload(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    

    # This should never happen, because an out of bounds method index won't
    # ever be used. Once we can catch errors, we should return an InternalException.
    # https://github.com/mozilla/uniffi-rs/issues/351

    # An unexpected error happened.
    # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
    return UNIFFI_CALLBACK_UNEXPECTED_ERROR

# We need to keep this function reference alive:
# if they get GC'd while in use then UniFFI internals could attempt to call a function
# that is in freed memory.
# That would be...uh...bad. Yeah, that's the word. Bad.
foreignCallbackCallbackInterfaceUploader = FOREIGN_CALLBACK_T(py_foreignCallbackCallbackInterfaceUploader)
rust_call(lambda err: _UniFFILib.uniffi_client_fn_init_callback_uploader(foreignCallbackCallbackInterfaceUploader, err))

# The FfiConverter which transforms the Callbacks in to Handles to pass to Rust.
FfiConverterCallbackInterfaceUploader = FfiConverterCallbackInterface(foreignCallbackCallbackInterfaceUploader)



class FfiConverterOptionalString(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterOptionalTypeAuthInfo(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterTypeAuthInfo.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterTypeAuthInfo.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterOptionalTypeContent(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterTypeContent.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterTypeContent.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterOptionalTypeTopicNotice(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterTypeTopicNotice.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterTypeTopicNotice.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterOptionalCallbackInterfaceCallback(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterCallbackInterfaceCallback.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterCallbackInterfaceCallback.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterOptionalCallbackInterfaceUploader(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterCallbackInterfaceUploader.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterCallbackInterfaceUploader.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterOptionalSequenceString(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterSequenceString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterSequenceString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterSequenceString(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterString.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterString.read(buf) for i in range(count)
        ]



class FfiConverterSequenceTypeChatLog(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterTypeChatLog.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterTypeChatLog.read(buf) for i in range(count)
        ]



class FfiConverterSequenceTypeConversation(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterTypeConversation.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterTypeConversation.read(buf) for i in range(count)
        ]



class FfiConverterSequenceTypeTopicKnock(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterTypeTopicKnock.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterTypeTopicKnock.read(buf) for i in range(count)
        ]



class FfiConverterSequenceTypeUser(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterTypeUser.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterTypeUser.read(buf) for i in range(count)
        ]

def init_log(level: "str",is_test: "bool"):
    
    
    rust_call(_UniFFILib.uniffi_client_fn_func_init_log,
        FfiConverterString.lower(level),
        FfiConverterBool.lower(is_test))


def get_current_user(root: "str"):
    
    return FfiConverterOptionalTypeAuthInfo.lift(rust_call(_UniFFILib.uniffi_client_fn_func_get_current_user,
        FfiConverterString.lower(root)))


def set_current_user(root: "str",user_id: "str"):
    
    
    rust_call_with_error(FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_func_set_current_user,
        FfiConverterString.lower(root),
        FfiConverterString.lower(user_id))


def login(endpoint: "str",email: "str",password: "str"):
    
    
    
    return FfiConverterTypeAuthInfo.lift(rust_call_with_error(FfiConverterTypeClientError,_UniFFILib.uniffi_client_fn_func_login,
        FfiConverterString.lower(endpoint),
        FfiConverterString.lower(email),
        FfiConverterString.lower(password)))


__all__ = [
    "InternalError",
    "ClientError",
    "NetworkState",
    "AuthInfo",
    "ChatLog",
    "Content",
    "Conversation",
    "ListChatLogResult",
    "ListConversationResult",
    "ListUserResult",
    "Topic",
    "TopicKnock",
    "TopicMember",
    "TopicNotice",
    "User",
    "init_log",
    "get_current_user",
    "set_current_user",
    "login",
    "Client",
    "Callback",
    "Uploader",
]

