// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.client;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the detils of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.locks.ReentrantLock
import kotlin.concurrent.withLock

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_client_rustbuffer_alloc(size, status).also {
                if(it.data == null) {
                   throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
               }
            }
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_client_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getInt(0))
        value.writeField("len", pointer.getInt(4))
        value.writeField("data", pointer.getPointer(8))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class RustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: RustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == 0.toByte()
    }

    fun isError(): Boolean {
        return code == 1.toByte()
    }

    fun isPanic(): Boolean {
        return code == 2.toByte()
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> rustCallWithError(errorHandler: CallStatusErrorHandler<E>, callback: (RustCallStatus) -> U): U {
    var status = RustCallStatus();
    val return_value = callback(status)
    checkCallStatus(errorHandler, status)
    return return_value
}

// Check RustCallStatus and throw an error if the call wasn't successful
private fun<E: Exception> checkCallStatus(errorHandler: CallStatusErrorHandler<E>, status: RustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object NullCallStatusErrorHandler: CallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> rustCall(callback: (RustCallStatus) -> U): U {
    return rustCallWithError(NullCallStatusErrorHandler, callback);
}

// IntegerType that matches Rust's `usize` / C's `size_t`
public class USize(value: Long = 0) : IntegerType(Native.SIZE_T_SIZE, value, true) {
    // This is needed to fill in the gaps of IntegerType's implementation of Number for Kotlin.
    override fun toByte() = toInt().toByte()
    override fun toChar() = toInt().toChar()
    override fun toShort() = toInt().toShort()

    fun writeToBuffer(buf: ByteBuffer) {
        // Make sure we always write usize integers using native byte-order, since they may be
        // casted to pointer values
        buf.order(ByteOrder.nativeOrder())
        try {
            when (Native.SIZE_T_SIZE) {
                4 -> buf.putInt(toInt())
                8 -> buf.putLong(toLong())
                else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
            }
        } finally {
            buf.order(ByteOrder.BIG_ENDIAN)
        }
    }

    companion object {
        val size: Int
            get() = Native.SIZE_T_SIZE

        fun readFromBuffer(buf: ByteBuffer) : USize {
            // Make sure we always read usize integers using native byte-order, since they may be
            // casted from pointer values
            buf.order(ByteOrder.nativeOrder())
            try {
                return when (Native.SIZE_T_SIZE) {
                    4 -> USize(buf.getInt().toLong())
                    8 -> USize(buf.getLong())
                    else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
                }
            } finally {
                buf.order(ByteOrder.BIG_ENDIAN)
            }
        }
    }
}


// Map handles to objects
//
// This is used when the Rust code expects an opaque pointer to represent some foreign object.
// Normally we would pass a pointer to the object, but JNA doesn't support getting a pointer from an
// object reference , nor does it support leaking a reference to Rust.
//
// Instead, this class maps USize values to objects so that we can pass a pointer-sized type to
// Rust when it needs an opaque pointer.
//
// TODO: refactor callbacks to use this class
internal class UniFfiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<USize, T>()
    // Use AtomicInteger for our counter, since we may be on a 32-bit system.  4 billion possible
    // values seems like enough. If somehow we generate 4 billion handles, then this will wrap
    // around back to zero and we can assume the first handle generated will have been dropped by
    // then.
    private val counter = java.util.concurrent.atomic.AtomicInteger(0)

    val size: Int
        get() = map.size

    fun insert(obj: T): USize {
        val handle = USize(counter.getAndAdd(1).toLong())
        map.put(handle, obj)
        return handle
    }

    fun get(handle: USize): T? {
        return map.get(handle)
    }

    fun remove(handle: USize) {
        map.remove(handle)
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "restsend_sdk"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy {
            loadIndirect<_UniFFILib>(componentName = "client")
            .also { lib: _UniFFILib ->
                uniffiCheckContractApiVersion(lib)
                uniffiCheckApiChecksums(lib)
                FfiConverterTypeCallback.register(lib)
                FfiConverterTypeUploader.register(lib)
                }
        }
    }

    fun uniffi_client_fn_free_client(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_constructor_client_new(`dbName`: RustBuffer.ByValue,`endpoint`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_client_fn_method_client_set_callback(`ptr`: Pointer,`callback`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_set_uploader(`ptr`: Pointer,`uploader`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_prepare(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_attach(`ptr`: Pointer,`info`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_app_active(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_app_deactivate(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_logout(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_run_loop(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_shutdown(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_get_network_state(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_get_topics_knock_count(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Int
    fun uniffi_client_fn_method_client_get_conversations_count(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Int
    fun uniffi_client_fn_method_client_get_conversation(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_remove_conversation(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_set_conversation_sticky(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`sticky`: Byte,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_set_conversation_mute(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`mute`: Byte,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_set_conversation_read(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_get_conversations(`ptr`: Pointer,`updatedAt`: RustBuffer.ByValue,`limit`: Int,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_sync_conversations(`ptr`: Pointer,`withoutCache`: Byte,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_get_topic(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_get_topic_admins(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_get_topic_owner(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_get_topic_members(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`updatedAt`: RustBuffer.ByValue,`limit`: Int,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_get_chat_logs_desc(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`startSeq`: Long,`endSeq`: Long,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_get_chat_log(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`id`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_search_chat_log(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`senderId`: RustBuffer.ByValue,`keyword`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_get_topic_knocks(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_create_topic(`ptr`: Pointer,`name`: RustBuffer.ByValue,`icon`: RustBuffer.ByValue,`members`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_create_chat(`ptr`: Pointer,`userId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_update_topic(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`name`: RustBuffer.ByValue,`icon`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_update_topic_notice(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`text`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_silent_topic(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`duration`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_silent_topic_member(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`userId`: RustBuffer.ByValue,`duration`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_add_topic_admin(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`userId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_remove_topic_admin(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`userId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_transfer_topic(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`userId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_quit_topic(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_dismiss_topic(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_join_topic(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`source`: RustBuffer.ByValue,`message`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_accept_topic_join(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`userId`: RustBuffer.ByValue,`memo`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_decline_topic_join(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`userId`: RustBuffer.ByValue,`message`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_invite_topic_member(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`userId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_remove_topic_member(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`userId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_clean_topic_history(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`sync`: Byte,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_remove_messages(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`chatIds`: RustBuffer.ByValue,`sync`: Byte,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_get_user(`ptr`: Pointer,`userId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_set_user_remark(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`remark`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_set_user_star(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`star`: Byte,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_set_user_block(`ptr`: Pointer,`userId`: RustBuffer.ByValue,`block`: Byte,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_set_allow_guest_chat(`ptr`: Pointer,`allow`: Byte,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_do_typing(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_do_recall(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`chatId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_do_send_text(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`text`: RustBuffer.ByValue,`mentions`: RustBuffer.ByValue,`replyId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_do_send_image(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`urlOrData`: RustBuffer.ByValue,`mentions`: RustBuffer.ByValue,`replyId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_do_send_voice(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`urlOrData`: RustBuffer.ByValue,`duration`: RustBuffer.ByValue,`mentions`: RustBuffer.ByValue,`replyId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_do_send_video(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`url`: RustBuffer.ByValue,`thumbnail`: RustBuffer.ByValue,`duration`: RustBuffer.ByValue,`mentions`: RustBuffer.ByValue,`replyId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_do_send_file(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`urlOrData`: RustBuffer.ByValue,`filename`: RustBuffer.ByValue,`size`: Long,`mentions`: RustBuffer.ByValue,`replyId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_do_send_location(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`latitude`: RustBuffer.ByValue,`longitude`: RustBuffer.ByValue,`address`: RustBuffer.ByValue,`mentions`: RustBuffer.ByValue,`replyId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_do_send_link(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`url`: RustBuffer.ByValue,`mentions`: RustBuffer.ByValue,`replyId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_do_send_invite(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`mentions`: RustBuffer.ByValue,`message`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_do_send(`ptr`: Pointer,`topicId`: RustBuffer.ByValue,`content`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_method_client_upload(`ptr`: Pointer,`uploaderUrl`: RustBuffer.ByValue,`localFilePath`: RustBuffer.ByValue,`key`: RustBuffer.ByValue,`isPrivate`: Byte,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_download(`ptr`: Pointer,`fileUrl`: RustBuffer.ByValue,`saveTo`: RustBuffer.ByValue,`key`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_cancel_download(`ptr`: Pointer,`fileUrl`: RustBuffer.ByValue,`key`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_method_client_cancel_upload(`ptr`: Pointer,`localFilePath`: RustBuffer.ByValue,`key`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_init_callback_callback(`callbackStub`: ForeignCallback,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_init_callback_uploader(`callbackStub`: ForeignCallback,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_func_init_log(`level`: RustBuffer.ByValue,`isTest`: Byte,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_func_get_current_user(`root`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_fn_func_set_current_user(`root`: RustBuffer.ByValue,`userId`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_client_fn_func_login(`endpoint`: RustBuffer.ByValue,`email`: RustBuffer.ByValue,`password`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_client_rustbuffer_alloc(`size`: Int,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_client_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_client_rustbuffer_free(`buf`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun ffi_client_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Int,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_client_checksum_func_init_log(
    ): Short
    fun uniffi_client_checksum_func_get_current_user(
    ): Short
    fun uniffi_client_checksum_func_set_current_user(
    ): Short
    fun uniffi_client_checksum_func_login(
    ): Short
    fun uniffi_client_checksum_method_client_set_callback(
    ): Short
    fun uniffi_client_checksum_method_client_set_uploader(
    ): Short
    fun uniffi_client_checksum_method_client_prepare(
    ): Short
    fun uniffi_client_checksum_method_client_attach(
    ): Short
    fun uniffi_client_checksum_method_client_app_active(
    ): Short
    fun uniffi_client_checksum_method_client_app_deactivate(
    ): Short
    fun uniffi_client_checksum_method_client_logout(
    ): Short
    fun uniffi_client_checksum_method_client_run_loop(
    ): Short
    fun uniffi_client_checksum_method_client_shutdown(
    ): Short
    fun uniffi_client_checksum_method_client_get_network_state(
    ): Short
    fun uniffi_client_checksum_method_client_get_topics_knock_count(
    ): Short
    fun uniffi_client_checksum_method_client_get_conversations_count(
    ): Short
    fun uniffi_client_checksum_method_client_get_conversation(
    ): Short
    fun uniffi_client_checksum_method_client_remove_conversation(
    ): Short
    fun uniffi_client_checksum_method_client_set_conversation_sticky(
    ): Short
    fun uniffi_client_checksum_method_client_set_conversation_mute(
    ): Short
    fun uniffi_client_checksum_method_client_set_conversation_read(
    ): Short
    fun uniffi_client_checksum_method_client_get_conversations(
    ): Short
    fun uniffi_client_checksum_method_client_sync_conversations(
    ): Short
    fun uniffi_client_checksum_method_client_get_topic(
    ): Short
    fun uniffi_client_checksum_method_client_get_topic_admins(
    ): Short
    fun uniffi_client_checksum_method_client_get_topic_owner(
    ): Short
    fun uniffi_client_checksum_method_client_get_topic_members(
    ): Short
    fun uniffi_client_checksum_method_client_get_chat_logs_desc(
    ): Short
    fun uniffi_client_checksum_method_client_get_chat_log(
    ): Short
    fun uniffi_client_checksum_method_client_search_chat_log(
    ): Short
    fun uniffi_client_checksum_method_client_get_topic_knocks(
    ): Short
    fun uniffi_client_checksum_method_client_create_topic(
    ): Short
    fun uniffi_client_checksum_method_client_create_chat(
    ): Short
    fun uniffi_client_checksum_method_client_update_topic(
    ): Short
    fun uniffi_client_checksum_method_client_update_topic_notice(
    ): Short
    fun uniffi_client_checksum_method_client_silent_topic(
    ): Short
    fun uniffi_client_checksum_method_client_silent_topic_member(
    ): Short
    fun uniffi_client_checksum_method_client_add_topic_admin(
    ): Short
    fun uniffi_client_checksum_method_client_remove_topic_admin(
    ): Short
    fun uniffi_client_checksum_method_client_transfer_topic(
    ): Short
    fun uniffi_client_checksum_method_client_quit_topic(
    ): Short
    fun uniffi_client_checksum_method_client_dismiss_topic(
    ): Short
    fun uniffi_client_checksum_method_client_join_topic(
    ): Short
    fun uniffi_client_checksum_method_client_accept_topic_join(
    ): Short
    fun uniffi_client_checksum_method_client_decline_topic_join(
    ): Short
    fun uniffi_client_checksum_method_client_invite_topic_member(
    ): Short
    fun uniffi_client_checksum_method_client_remove_topic_member(
    ): Short
    fun uniffi_client_checksum_method_client_clean_topic_history(
    ): Short
    fun uniffi_client_checksum_method_client_remove_messages(
    ): Short
    fun uniffi_client_checksum_method_client_get_user(
    ): Short
    fun uniffi_client_checksum_method_client_set_user_remark(
    ): Short
    fun uniffi_client_checksum_method_client_set_user_star(
    ): Short
    fun uniffi_client_checksum_method_client_set_user_block(
    ): Short
    fun uniffi_client_checksum_method_client_set_allow_guest_chat(
    ): Short
    fun uniffi_client_checksum_method_client_do_typing(
    ): Short
    fun uniffi_client_checksum_method_client_do_recall(
    ): Short
    fun uniffi_client_checksum_method_client_do_send_text(
    ): Short
    fun uniffi_client_checksum_method_client_do_send_image(
    ): Short
    fun uniffi_client_checksum_method_client_do_send_voice(
    ): Short
    fun uniffi_client_checksum_method_client_do_send_video(
    ): Short
    fun uniffi_client_checksum_method_client_do_send_file(
    ): Short
    fun uniffi_client_checksum_method_client_do_send_location(
    ): Short
    fun uniffi_client_checksum_method_client_do_send_link(
    ): Short
    fun uniffi_client_checksum_method_client_do_send_invite(
    ): Short
    fun uniffi_client_checksum_method_client_do_send(
    ): Short
    fun uniffi_client_checksum_method_client_upload(
    ): Short
    fun uniffi_client_checksum_method_client_download(
    ): Short
    fun uniffi_client_checksum_method_client_cancel_download(
    ): Short
    fun uniffi_client_checksum_method_client_cancel_upload(
    ): Short
    fun uniffi_client_checksum_constructor_client_new(
    ): Short
    fun ffi_client_uniffi_contract_version(
    ): Int
    
}

private fun uniffiCheckContractApiVersion(lib: _UniFFILib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 22
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_client_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: _UniFFILib) {
    if (lib.uniffi_client_checksum_func_init_log() != 9358.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_func_get_current_user() != 36766.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_func_set_current_user() != 64332.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_func_login() != 28004.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_set_callback() != 55355.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_set_uploader() != 29309.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_prepare() != 33639.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_attach() != 40661.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_app_active() != 53973.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_app_deactivate() != 9654.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_logout() != 28478.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_run_loop() != 57808.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_shutdown() != 41462.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_get_network_state() != 22572.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_get_topics_knock_count() != 11790.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_get_conversations_count() != 25497.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_get_conversation() != 26005.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_remove_conversation() != 26245.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_set_conversation_sticky() != 24476.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_set_conversation_mute() != 19326.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_set_conversation_read() != 61548.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_get_conversations() != 59859.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_sync_conversations() != 36154.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_get_topic() != 63409.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_get_topic_admins() != 32007.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_get_topic_owner() != 20038.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_get_topic_members() != 42408.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_get_chat_logs_desc() != 33827.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_get_chat_log() != 14674.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_search_chat_log() != 60608.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_get_topic_knocks() != 45216.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_create_topic() != 23937.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_create_chat() != 10852.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_update_topic() != 17684.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_update_topic_notice() != 32205.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_silent_topic() != 9520.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_silent_topic_member() != 59564.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_add_topic_admin() != 36967.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_remove_topic_admin() != 36592.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_transfer_topic() != 11354.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_quit_topic() != 3650.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_dismiss_topic() != 4383.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_join_topic() != 36228.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_accept_topic_join() != 22619.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_decline_topic_join() != 39967.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_invite_topic_member() != 32627.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_remove_topic_member() != 6374.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_clean_topic_history() != 18125.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_remove_messages() != 40827.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_get_user() != 62667.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_set_user_remark() != 9172.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_set_user_star() != 1481.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_set_user_block() != 59481.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_set_allow_guest_chat() != 24595.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_do_typing() != 63193.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_do_recall() != 14737.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_do_send_text() != 20437.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_do_send_image() != 59928.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_do_send_voice() != 60890.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_do_send_video() != 46395.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_do_send_file() != 39341.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_do_send_location() != 23943.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_do_send_link() != 4676.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_do_send_invite() != 1178.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_do_send() != 12153.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_upload() != 19554.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_download() != 56540.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_cancel_download() != 64461.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_method_client_cancel_upload() != 10332.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_client_checksum_constructor_client_new() != 20644.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Public interface members begin here.


public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterFloat: FfiConverter<Float, Float> {
    override fun lift(value: Float): Float {
        return value
    }

    override fun read(buf: ByteBuffer): Float {
        return buf.getFloat()
    }

    override fun lower(value: Float): Float {
        return value
    }

    override fun allocationSize(value: Float) = 4

    override fun write(value: Float, buf: ByteBuffer) {
        buf.putFloat(value)
    }
}

public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteArr.size)
        rbuf.asByteBuffer()!!.put(byteArr)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        buf.putInt(byteArr.size)
        buf.put(byteArr)
    }
}


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

// The base class for all UniFFI Object types.
//
// This class provides core operations for working with the Rust `Arc<T>` pointer to
// the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// the Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each `FFIObject` instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an `FFIObject` is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an `FFIObject` instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so will
//     leak the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each `FFIObject` an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// In the future we may be able to replace some of this with automatic finalization logic, such as using
// the new "Cleaner" functionaility in Java 9. The above scheme has been designed to work even if `destroy` is
// invoked by garbage-collection machinery rather than by calling code (which by the way, it's apparently also
// possible for the JVM to finalize an object while there is an in-flight call to one of its methods [1],
// so there would still be some complexity here).
//
// Sigh...all of this for want of a robust finalization mechanism.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//
abstract class FFIObject(
    protected val pointer: Pointer
): Disposable, AutoCloseable {

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    open protected fun freeRustArcPtr() {
        // To be overridden in subclasses.
    }

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.pointer)
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }
}

public interface ClientInterface {
    
    fun `setCallback`(`callback`: Callback?)
    fun `setUploader`(`uploader`: Uploader?)@Throws(ClientException::class)
    fun `prepare`()@Throws(ClientException::class)
    fun `attach`(`info`: AuthInfo)
    fun `appActive`()
    fun `appDeactivate`()@Throws(ClientException::class)
    fun `logout`()@Throws(ClientException::class)
    fun `runLoop`()@Throws(ClientException::class)
    fun `shutdown`()
    fun `getNetworkState`(): NetworkState@Throws(ClientException::class)
    fun `getTopicsKnockCount`(): UInt@Throws(ClientException::class)
    fun `getConversationsCount`(): UInt@Throws(ClientException::class)
    fun `getConversation`(`topicId`: String): Conversation@Throws(ClientException::class)
    fun `removeConversation`(`topicId`: String)@Throws(ClientException::class)
    fun `setConversationSticky`(`topicId`: String, `sticky`: Boolean)@Throws(ClientException::class)
    fun `setConversationMute`(`topicId`: String, `mute`: Boolean)@Throws(ClientException::class)
    fun `setConversationRead`(`topicId`: String)@Throws(ClientException::class)
    fun `getConversations`(`updatedAt`: String, `limit`: UInt): ListConversationResult@Throws(ClientException::class)
    fun `syncConversations`(`withoutCache`: Boolean)@Throws(ClientException::class)
    fun `getTopic`(`topicId`: String): Topic@Throws(ClientException::class)
    fun `getTopicAdmins`(`topicId`: String): List<User>@Throws(ClientException::class)
    fun `getTopicOwner`(`topicId`: String): User@Throws(ClientException::class)
    fun `getTopicMembers`(`topicId`: String, `updatedAt`: String, `limit`: UInt): ListUserResult@Throws(ClientException::class)
    fun `getChatLogsDesc`(`topicId`: String, `startSeq`: ULong, `endSeq`: ULong): ListChatLogResult@Throws(ClientException::class)
    fun `getChatLog`(`topicId`: String, `id`: String): ChatLog@Throws(ClientException::class)
    fun `searchChatLog`(`topicId`: String, `senderId`: String, `keyword`: String): List<ChatLog>@Throws(ClientException::class)
    fun `getTopicKnocks`(`topicId`: String): List<TopicKnock>@Throws(ClientException::class)
    fun `createTopic`(`name`: String, `icon`: String, `members`: List<String>): Topic@Throws(ClientException::class)
    fun `createChat`(`userId`: String): Topic@Throws(ClientException::class)
    fun `updateTopic`(`topicId`: String, `name`: String, `icon`: String)@Throws(ClientException::class)
    fun `updateTopicNotice`(`topicId`: String, `text`: String)@Throws(ClientException::class)
    fun `silentTopic`(`topicId`: String, `duration`: String)@Throws(ClientException::class)
    fun `silentTopicMember`(`topicId`: String, `userId`: String, `duration`: String)@Throws(ClientException::class)
    fun `addTopicAdmin`(`topicId`: String, `userId`: String)@Throws(ClientException::class)
    fun `removeTopicAdmin`(`topicId`: String, `userId`: String)@Throws(ClientException::class)
    fun `transferTopic`(`topicId`: String, `userId`: String)@Throws(ClientException::class)
    fun `quitTopic`(`topicId`: String)@Throws(ClientException::class)
    fun `dismissTopic`(`topicId`: String)@Throws(ClientException::class)
    fun `joinTopic`(`topicId`: String, `source`: String, `message`: String)@Throws(ClientException::class)
    fun `acceptTopicJoin`(`topicId`: String, `userId`: String, `memo`: String)@Throws(ClientException::class)
    fun `declineTopicJoin`(`topicId`: String, `userId`: String, `message`: String)@Throws(ClientException::class)
    fun `inviteTopicMember`(`topicId`: String, `userId`: String)@Throws(ClientException::class)
    fun `removeTopicMember`(`topicId`: String, `userId`: String)@Throws(ClientException::class)
    fun `cleanTopicHistory`(`topicId`: String, `sync`: Boolean)@Throws(ClientException::class)
    fun `removeMessages`(`topicId`: String, `chatIds`: List<String>, `sync`: Boolean)@Throws(ClientException::class)
    fun `getUser`(`userId`: String): User@Throws(ClientException::class)
    fun `setUserRemark`(`userId`: String, `remark`: String)@Throws(ClientException::class)
    fun `setUserStar`(`userId`: String, `star`: Boolean)@Throws(ClientException::class)
    fun `setUserBlock`(`userId`: String, `block`: Boolean)@Throws(ClientException::class)
    fun `setAllowGuestChat`(`allow`: Boolean)@Throws(ClientException::class)
    fun `doTyping`(`topicId`: String): String@Throws(ClientException::class)
    fun `doRecall`(`topicId`: String, `chatId`: String): String@Throws(ClientException::class)
    fun `doSendText`(`topicId`: String, `text`: String, `mentions`: List<String>?, `replyId`: String?): String@Throws(ClientException::class)
    fun `doSendImage`(`topicId`: String, `urlOrData`: String, `mentions`: List<String>?, `replyId`: String?): String@Throws(ClientException::class)
    fun `doSendVoice`(`topicId`: String, `urlOrData`: String, `duration`: String, `mentions`: List<String>?, `replyId`: String?): String@Throws(ClientException::class)
    fun `doSendVideo`(`topicId`: String, `url`: String, `thumbnail`: String, `duration`: String, `mentions`: List<String>?, `replyId`: String?): String@Throws(ClientException::class)
    fun `doSendFile`(`topicId`: String, `urlOrData`: String, `filename`: String, `size`: ULong, `mentions`: List<String>?, `replyId`: String?): String@Throws(ClientException::class)
    fun `doSendLocation`(`topicId`: String, `latitude`: String, `longitude`: String, `address`: String, `mentions`: List<String>?, `replyId`: String?): String@Throws(ClientException::class)
    fun `doSendLink`(`topicId`: String, `url`: String, `mentions`: List<String>?, `replyId`: String?): String@Throws(ClientException::class)
    fun `doSendInvite`(`topicId`: String, `mentions`: List<String>, `message`: String?): String@Throws(ClientException::class)
    fun `doSend`(`topicId`: String, `content`: Content): String@Throws(ClientException::class)
    fun `upload`(`uploaderUrl`: String?, `localFilePath`: String, `key`: String, `isPrivate`: Boolean)@Throws(ClientException::class)
    fun `download`(`fileUrl`: String, `saveTo`: String, `key`: String)@Throws(ClientException::class)
    fun `cancelDownload`(`fileUrl`: String, `key`: String)@Throws(ClientException::class)
    fun `cancelUpload`(`localFilePath`: String, `key`: String)
}

class Client(
    pointer: Pointer
) : FFIObject(pointer), ClientInterface {
    constructor(`dbName`: String, `endpoint`: String) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_constructor_client_new(FfiConverterString.lower(`dbName`),FfiConverterString.lower(`endpoint`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_client_fn_free_client(this.pointer, status)
        }
    }

    override fun `setCallback`(`callback`: Callback?) =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_set_callback(it,
        FfiConverterOptionalTypeCallback.lower(`callback`),
        _status)
}
        }
    
    
    override fun `setUploader`(`uploader`: Uploader?) =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_set_uploader(it,
        FfiConverterOptionalTypeUploader.lower(`uploader`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `prepare`() =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_prepare(it,
        
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `attach`(`info`: AuthInfo) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_attach(it,
        FfiConverterTypeAuthInfo.lower(`info`),
        _status)
}
        }
    
    
    override fun `appActive`() =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_app_active(it,
        
        _status)
}
        }
    
    
    override fun `appDeactivate`() =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_app_deactivate(it,
        
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `logout`() =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_logout(it,
        
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `runLoop`() =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_run_loop(it,
        
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `shutdown`() =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_shutdown(it,
        
        _status)
}
        }
    
    
    override fun `getNetworkState`(): NetworkState =
        callWithPointer {
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_get_network_state(it,
        
        _status)
}
        }.let {
            FfiConverterTypeNetworkState.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `getTopicsKnockCount`(): UInt =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_get_topics_knock_count(it,
        
        _status)
}
        }.let {
            FfiConverterUInt.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `getConversationsCount`(): UInt =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_get_conversations_count(it,
        
        _status)
}
        }.let {
            FfiConverterUInt.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `getConversation`(`topicId`: String): Conversation =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_get_conversation(it,
        FfiConverterString.lower(`topicId`),
        _status)
}
        }.let {
            FfiConverterTypeConversation.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `removeConversation`(`topicId`: String) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_remove_conversation(it,
        FfiConverterString.lower(`topicId`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `setConversationSticky`(`topicId`: String, `sticky`: Boolean) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_set_conversation_sticky(it,
        FfiConverterString.lower(`topicId`),FfiConverterBoolean.lower(`sticky`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `setConversationMute`(`topicId`: String, `mute`: Boolean) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_set_conversation_mute(it,
        FfiConverterString.lower(`topicId`),FfiConverterBoolean.lower(`mute`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `setConversationRead`(`topicId`: String) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_set_conversation_read(it,
        FfiConverterString.lower(`topicId`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `getConversations`(`updatedAt`: String, `limit`: UInt): ListConversationResult =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_get_conversations(it,
        FfiConverterString.lower(`updatedAt`),FfiConverterUInt.lower(`limit`),
        _status)
}
        }.let {
            FfiConverterTypeListConversationResult.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `syncConversations`(`withoutCache`: Boolean) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_sync_conversations(it,
        FfiConverterBoolean.lower(`withoutCache`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `getTopic`(`topicId`: String): Topic =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_get_topic(it,
        FfiConverterString.lower(`topicId`),
        _status)
}
        }.let {
            FfiConverterTypeTopic.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `getTopicAdmins`(`topicId`: String): List<User> =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_get_topic_admins(it,
        FfiConverterString.lower(`topicId`),
        _status)
}
        }.let {
            FfiConverterSequenceTypeUser.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `getTopicOwner`(`topicId`: String): User =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_get_topic_owner(it,
        FfiConverterString.lower(`topicId`),
        _status)
}
        }.let {
            FfiConverterTypeUser.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `getTopicMembers`(`topicId`: String, `updatedAt`: String, `limit`: UInt): ListUserResult =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_get_topic_members(it,
        FfiConverterString.lower(`topicId`),FfiConverterString.lower(`updatedAt`),FfiConverterUInt.lower(`limit`),
        _status)
}
        }.let {
            FfiConverterTypeListUserResult.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `getChatLogsDesc`(`topicId`: String, `startSeq`: ULong, `endSeq`: ULong): ListChatLogResult =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_get_chat_logs_desc(it,
        FfiConverterString.lower(`topicId`),FfiConverterULong.lower(`startSeq`),FfiConverterULong.lower(`endSeq`),
        _status)
}
        }.let {
            FfiConverterTypeListChatLogResult.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `getChatLog`(`topicId`: String, `id`: String): ChatLog =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_get_chat_log(it,
        FfiConverterString.lower(`topicId`),FfiConverterString.lower(`id`),
        _status)
}
        }.let {
            FfiConverterTypeChatLog.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `searchChatLog`(`topicId`: String, `senderId`: String, `keyword`: String): List<ChatLog> =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_search_chat_log(it,
        FfiConverterString.lower(`topicId`),FfiConverterString.lower(`senderId`),FfiConverterString.lower(`keyword`),
        _status)
}
        }.let {
            FfiConverterSequenceTypeChatLog.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `getTopicKnocks`(`topicId`: String): List<TopicKnock> =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_get_topic_knocks(it,
        FfiConverterString.lower(`topicId`),
        _status)
}
        }.let {
            FfiConverterSequenceTypeTopicKnock.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `createTopic`(`name`: String, `icon`: String, `members`: List<String>): Topic =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_create_topic(it,
        FfiConverterString.lower(`name`),FfiConverterString.lower(`icon`),FfiConverterSequenceString.lower(`members`),
        _status)
}
        }.let {
            FfiConverterTypeTopic.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `createChat`(`userId`: String): Topic =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_create_chat(it,
        FfiConverterString.lower(`userId`),
        _status)
}
        }.let {
            FfiConverterTypeTopic.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `updateTopic`(`topicId`: String, `name`: String, `icon`: String) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_update_topic(it,
        FfiConverterString.lower(`topicId`),FfiConverterString.lower(`name`),FfiConverterString.lower(`icon`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `updateTopicNotice`(`topicId`: String, `text`: String) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_update_topic_notice(it,
        FfiConverterString.lower(`topicId`),FfiConverterString.lower(`text`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `silentTopic`(`topicId`: String, `duration`: String) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_silent_topic(it,
        FfiConverterString.lower(`topicId`),FfiConverterString.lower(`duration`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `silentTopicMember`(`topicId`: String, `userId`: String, `duration`: String) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_silent_topic_member(it,
        FfiConverterString.lower(`topicId`),FfiConverterString.lower(`userId`),FfiConverterString.lower(`duration`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `addTopicAdmin`(`topicId`: String, `userId`: String) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_add_topic_admin(it,
        FfiConverterString.lower(`topicId`),FfiConverterString.lower(`userId`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `removeTopicAdmin`(`topicId`: String, `userId`: String) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_remove_topic_admin(it,
        FfiConverterString.lower(`topicId`),FfiConverterString.lower(`userId`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `transferTopic`(`topicId`: String, `userId`: String) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_transfer_topic(it,
        FfiConverterString.lower(`topicId`),FfiConverterString.lower(`userId`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `quitTopic`(`topicId`: String) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_quit_topic(it,
        FfiConverterString.lower(`topicId`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `dismissTopic`(`topicId`: String) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_dismiss_topic(it,
        FfiConverterString.lower(`topicId`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `joinTopic`(`topicId`: String, `source`: String, `message`: String) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_join_topic(it,
        FfiConverterString.lower(`topicId`),FfiConverterString.lower(`source`),FfiConverterString.lower(`message`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `acceptTopicJoin`(`topicId`: String, `userId`: String, `memo`: String) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_accept_topic_join(it,
        FfiConverterString.lower(`topicId`),FfiConverterString.lower(`userId`),FfiConverterString.lower(`memo`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `declineTopicJoin`(`topicId`: String, `userId`: String, `message`: String) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_decline_topic_join(it,
        FfiConverterString.lower(`topicId`),FfiConverterString.lower(`userId`),FfiConverterString.lower(`message`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `inviteTopicMember`(`topicId`: String, `userId`: String) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_invite_topic_member(it,
        FfiConverterString.lower(`topicId`),FfiConverterString.lower(`userId`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `removeTopicMember`(`topicId`: String, `userId`: String) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_remove_topic_member(it,
        FfiConverterString.lower(`topicId`),FfiConverterString.lower(`userId`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `cleanTopicHistory`(`topicId`: String, `sync`: Boolean) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_clean_topic_history(it,
        FfiConverterString.lower(`topicId`),FfiConverterBoolean.lower(`sync`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `removeMessages`(`topicId`: String, `chatIds`: List<String>, `sync`: Boolean) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_remove_messages(it,
        FfiConverterString.lower(`topicId`),FfiConverterSequenceString.lower(`chatIds`),FfiConverterBoolean.lower(`sync`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `getUser`(`userId`: String): User =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_get_user(it,
        FfiConverterString.lower(`userId`),
        _status)
}
        }.let {
            FfiConverterTypeUser.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `setUserRemark`(`userId`: String, `remark`: String) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_set_user_remark(it,
        FfiConverterString.lower(`userId`),FfiConverterString.lower(`remark`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `setUserStar`(`userId`: String, `star`: Boolean) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_set_user_star(it,
        FfiConverterString.lower(`userId`),FfiConverterBoolean.lower(`star`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `setUserBlock`(`userId`: String, `block`: Boolean) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_set_user_block(it,
        FfiConverterString.lower(`userId`),FfiConverterBoolean.lower(`block`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `setAllowGuestChat`(`allow`: Boolean) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_set_allow_guest_chat(it,
        FfiConverterBoolean.lower(`allow`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `doTyping`(`topicId`: String): String =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_do_typing(it,
        FfiConverterString.lower(`topicId`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `doRecall`(`topicId`: String, `chatId`: String): String =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_do_recall(it,
        FfiConverterString.lower(`topicId`),FfiConverterString.lower(`chatId`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `doSendText`(`topicId`: String, `text`: String, `mentions`: List<String>?, `replyId`: String?): String =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_do_send_text(it,
        FfiConverterString.lower(`topicId`),FfiConverterString.lower(`text`),FfiConverterOptionalSequenceString.lower(`mentions`),FfiConverterOptionalString.lower(`replyId`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `doSendImage`(`topicId`: String, `urlOrData`: String, `mentions`: List<String>?, `replyId`: String?): String =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_do_send_image(it,
        FfiConverterString.lower(`topicId`),FfiConverterString.lower(`urlOrData`),FfiConverterOptionalSequenceString.lower(`mentions`),FfiConverterOptionalString.lower(`replyId`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `doSendVoice`(`topicId`: String, `urlOrData`: String, `duration`: String, `mentions`: List<String>?, `replyId`: String?): String =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_do_send_voice(it,
        FfiConverterString.lower(`topicId`),FfiConverterString.lower(`urlOrData`),FfiConverterString.lower(`duration`),FfiConverterOptionalSequenceString.lower(`mentions`),FfiConverterOptionalString.lower(`replyId`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `doSendVideo`(`topicId`: String, `url`: String, `thumbnail`: String, `duration`: String, `mentions`: List<String>?, `replyId`: String?): String =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_do_send_video(it,
        FfiConverterString.lower(`topicId`),FfiConverterString.lower(`url`),FfiConverterString.lower(`thumbnail`),FfiConverterString.lower(`duration`),FfiConverterOptionalSequenceString.lower(`mentions`),FfiConverterOptionalString.lower(`replyId`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `doSendFile`(`topicId`: String, `urlOrData`: String, `filename`: String, `size`: ULong, `mentions`: List<String>?, `replyId`: String?): String =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_do_send_file(it,
        FfiConverterString.lower(`topicId`),FfiConverterString.lower(`urlOrData`),FfiConverterString.lower(`filename`),FfiConverterULong.lower(`size`),FfiConverterOptionalSequenceString.lower(`mentions`),FfiConverterOptionalString.lower(`replyId`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `doSendLocation`(`topicId`: String, `latitude`: String, `longitude`: String, `address`: String, `mentions`: List<String>?, `replyId`: String?): String =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_do_send_location(it,
        FfiConverterString.lower(`topicId`),FfiConverterString.lower(`latitude`),FfiConverterString.lower(`longitude`),FfiConverterString.lower(`address`),FfiConverterOptionalSequenceString.lower(`mentions`),FfiConverterOptionalString.lower(`replyId`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `doSendLink`(`topicId`: String, `url`: String, `mentions`: List<String>?, `replyId`: String?): String =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_do_send_link(it,
        FfiConverterString.lower(`topicId`),FfiConverterString.lower(`url`),FfiConverterOptionalSequenceString.lower(`mentions`),FfiConverterOptionalString.lower(`replyId`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `doSendInvite`(`topicId`: String, `mentions`: List<String>, `message`: String?): String =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_do_send_invite(it,
        FfiConverterString.lower(`topicId`),FfiConverterSequenceString.lower(`mentions`),FfiConverterOptionalString.lower(`message`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `doSend`(`topicId`: String, `content`: Content): String =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_do_send(it,
        FfiConverterString.lower(`topicId`),FfiConverterTypeContent.lower(`content`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    
    @Throws(ClientException::class)override fun `upload`(`uploaderUrl`: String?, `localFilePath`: String, `key`: String, `isPrivate`: Boolean) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_upload(it,
        FfiConverterOptionalString.lower(`uploaderUrl`),FfiConverterString.lower(`localFilePath`),FfiConverterString.lower(`key`),FfiConverterBoolean.lower(`isPrivate`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `download`(`fileUrl`: String, `saveTo`: String, `key`: String) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_download(it,
        FfiConverterString.lower(`fileUrl`),FfiConverterString.lower(`saveTo`),FfiConverterString.lower(`key`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `cancelDownload`(`fileUrl`: String, `key`: String) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_cancel_download(it,
        FfiConverterString.lower(`fileUrl`),FfiConverterString.lower(`key`),
        _status)
}
        }
    
    
    
    @Throws(ClientException::class)override fun `cancelUpload`(`localFilePath`: String, `key`: String) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_method_client_cancel_upload(it,
        FfiConverterString.lower(`localFilePath`),FfiConverterString.lower(`key`),
        _status)
}
        }
    
    
    

    
}

public object FfiConverterTypeClient: FfiConverter<Client, Pointer> {
    override fun lower(value: Client): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Client {
        return Client(value)
    }

    override fun read(buf: ByteBuffer): Client {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Client) = 8

    override fun write(value: Client, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




data class AuthInfo (
    var `endpoint`: String, 
    var `userId`: String, 
    var `avatar`: String, 
    var `name`: String, 
    var `token`: String
) {
    
}

public object FfiConverterTypeAuthInfo: FfiConverterRustBuffer<AuthInfo> {
    override fun read(buf: ByteBuffer): AuthInfo {
        return AuthInfo(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: AuthInfo) = (
            FfiConverterString.allocationSize(value.`endpoint`) +
            FfiConverterString.allocationSize(value.`userId`) +
            FfiConverterString.allocationSize(value.`avatar`) +
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterString.allocationSize(value.`token`)
    )

    override fun write(value: AuthInfo, buf: ByteBuffer) {
            FfiConverterString.write(value.`endpoint`, buf)
            FfiConverterString.write(value.`userId`, buf)
            FfiConverterString.write(value.`avatar`, buf)
            FfiConverterString.write(value.`name`, buf)
            FfiConverterString.write(value.`token`, buf)
    }
}




data class ChatLog (
    var `topicId`: String, 
    var `id`: String, 
    var `seq`: ULong, 
    var `createdAt`: String, 
    var `senderId`: String, 
    var `content`: Content, 
    var `read`: Boolean, 
    var `recall`: Boolean, 
    var `status`: UInt, 
    var `cachedAt`: String
) {
    
}

public object FfiConverterTypeChatLog: FfiConverterRustBuffer<ChatLog> {
    override fun read(buf: ByteBuffer): ChatLog {
        return ChatLog(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypeContent.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: ChatLog) = (
            FfiConverterString.allocationSize(value.`topicId`) +
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterULong.allocationSize(value.`seq`) +
            FfiConverterString.allocationSize(value.`createdAt`) +
            FfiConverterString.allocationSize(value.`senderId`) +
            FfiConverterTypeContent.allocationSize(value.`content`) +
            FfiConverterBoolean.allocationSize(value.`read`) +
            FfiConverterBoolean.allocationSize(value.`recall`) +
            FfiConverterUInt.allocationSize(value.`status`) +
            FfiConverterString.allocationSize(value.`cachedAt`)
    )

    override fun write(value: ChatLog, buf: ByteBuffer) {
            FfiConverterString.write(value.`topicId`, buf)
            FfiConverterString.write(value.`id`, buf)
            FfiConverterULong.write(value.`seq`, buf)
            FfiConverterString.write(value.`createdAt`, buf)
            FfiConverterString.write(value.`senderId`, buf)
            FfiConverterTypeContent.write(value.`content`, buf)
            FfiConverterBoolean.write(value.`read`, buf)
            FfiConverterBoolean.write(value.`recall`, buf)
            FfiConverterUInt.write(value.`status`, buf)
            FfiConverterString.write(value.`cachedAt`, buf)
    }
}




data class Content (
    var `type`: String, 
    var `encrypted`: Boolean, 
    var `checksum`: UInt, 
    var `text`: String, 
    var `placeholder`: String, 
    var `thumbnail`: String, 
    var `duration`: String, 
    var `size`: ULong, 
    var `width`: Float, 
    var `height`: Float, 
    var `mentions`: List<String>, 
    var `reply`: String, 
    var `createdAt`: String
) {
    
}

public object FfiConverterTypeContent: FfiConverterRustBuffer<Content> {
    override fun read(buf: ByteBuffer): Content {
        return Content(
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterFloat.read(buf),
            FfiConverterFloat.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: Content) = (
            FfiConverterString.allocationSize(value.`type`) +
            FfiConverterBoolean.allocationSize(value.`encrypted`) +
            FfiConverterUInt.allocationSize(value.`checksum`) +
            FfiConverterString.allocationSize(value.`text`) +
            FfiConverterString.allocationSize(value.`placeholder`) +
            FfiConverterString.allocationSize(value.`thumbnail`) +
            FfiConverterString.allocationSize(value.`duration`) +
            FfiConverterULong.allocationSize(value.`size`) +
            FfiConverterFloat.allocationSize(value.`width`) +
            FfiConverterFloat.allocationSize(value.`height`) +
            FfiConverterSequenceString.allocationSize(value.`mentions`) +
            FfiConverterString.allocationSize(value.`reply`) +
            FfiConverterString.allocationSize(value.`createdAt`)
    )

    override fun write(value: Content, buf: ByteBuffer) {
            FfiConverterString.write(value.`type`, buf)
            FfiConverterBoolean.write(value.`encrypted`, buf)
            FfiConverterUInt.write(value.`checksum`, buf)
            FfiConverterString.write(value.`text`, buf)
            FfiConverterString.write(value.`placeholder`, buf)
            FfiConverterString.write(value.`thumbnail`, buf)
            FfiConverterString.write(value.`duration`, buf)
            FfiConverterULong.write(value.`size`, buf)
            FfiConverterFloat.write(value.`width`, buf)
            FfiConverterFloat.write(value.`height`, buf)
            FfiConverterSequenceString.write(value.`mentions`, buf)
            FfiConverterString.write(value.`reply`, buf)
            FfiConverterString.write(value.`createdAt`, buf)
    }
}




data class Conversation (
    var `ownerId`: String, 
    var `topicId`: String, 
    var `lastSeq`: ULong, 
    var `multiple`: Boolean, 
    var `attendee`: String, 
    var `name`: String, 
    var `icon`: String, 
    var `sticky`: Boolean, 
    var `mute`: Boolean, 
    var `source`: String, 
    var `unread`: UInt, 
    var `lastSenderId`: String, 
    var `lastMessage`: Content?, 
    var `lastMessageAt`: String, 
    var `cachedAt`: String
) {
    
}

public object FfiConverterTypeConversation: FfiConverterRustBuffer<Conversation> {
    override fun read(buf: ByteBuffer): Conversation {
        return Conversation(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalTypeContent.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: Conversation) = (
            FfiConverterString.allocationSize(value.`ownerId`) +
            FfiConverterString.allocationSize(value.`topicId`) +
            FfiConverterULong.allocationSize(value.`lastSeq`) +
            FfiConverterBoolean.allocationSize(value.`multiple`) +
            FfiConverterString.allocationSize(value.`attendee`) +
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterString.allocationSize(value.`icon`) +
            FfiConverterBoolean.allocationSize(value.`sticky`) +
            FfiConverterBoolean.allocationSize(value.`mute`) +
            FfiConverterString.allocationSize(value.`source`) +
            FfiConverterUInt.allocationSize(value.`unread`) +
            FfiConverterString.allocationSize(value.`lastSenderId`) +
            FfiConverterOptionalTypeContent.allocationSize(value.`lastMessage`) +
            FfiConverterString.allocationSize(value.`lastMessageAt`) +
            FfiConverterString.allocationSize(value.`cachedAt`)
    )

    override fun write(value: Conversation, buf: ByteBuffer) {
            FfiConverterString.write(value.`ownerId`, buf)
            FfiConverterString.write(value.`topicId`, buf)
            FfiConverterULong.write(value.`lastSeq`, buf)
            FfiConverterBoolean.write(value.`multiple`, buf)
            FfiConverterString.write(value.`attendee`, buf)
            FfiConverterString.write(value.`name`, buf)
            FfiConverterString.write(value.`icon`, buf)
            FfiConverterBoolean.write(value.`sticky`, buf)
            FfiConverterBoolean.write(value.`mute`, buf)
            FfiConverterString.write(value.`source`, buf)
            FfiConverterUInt.write(value.`unread`, buf)
            FfiConverterString.write(value.`lastSenderId`, buf)
            FfiConverterOptionalTypeContent.write(value.`lastMessage`, buf)
            FfiConverterString.write(value.`lastMessageAt`, buf)
            FfiConverterString.write(value.`cachedAt`, buf)
    }
}




data class ListChatLogResult (
    var `hasMore`: Boolean, 
    var `updatedAt`: String, 
    var `lastSeq`: ULong, 
    var `items`: List<ChatLog>
) {
    
}

public object FfiConverterTypeListChatLogResult: FfiConverterRustBuffer<ListChatLogResult> {
    override fun read(buf: ByteBuffer): ListChatLogResult {
        return ListChatLogResult(
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterSequenceTypeChatLog.read(buf),
        )
    }

    override fun allocationSize(value: ListChatLogResult) = (
            FfiConverterBoolean.allocationSize(value.`hasMore`) +
            FfiConverterString.allocationSize(value.`updatedAt`) +
            FfiConverterULong.allocationSize(value.`lastSeq`) +
            FfiConverterSequenceTypeChatLog.allocationSize(value.`items`)
    )

    override fun write(value: ListChatLogResult, buf: ByteBuffer) {
            FfiConverterBoolean.write(value.`hasMore`, buf)
            FfiConverterString.write(value.`updatedAt`, buf)
            FfiConverterULong.write(value.`lastSeq`, buf)
            FfiConverterSequenceTypeChatLog.write(value.`items`, buf)
    }
}




data class ListConversationResult (
    var `hasMore`: Boolean, 
    var `updatedAt`: String, 
    var `items`: List<Conversation>
) {
    
}

public object FfiConverterTypeListConversationResult: FfiConverterRustBuffer<ListConversationResult> {
    override fun read(buf: ByteBuffer): ListConversationResult {
        return ListConversationResult(
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterSequenceTypeConversation.read(buf),
        )
    }

    override fun allocationSize(value: ListConversationResult) = (
            FfiConverterBoolean.allocationSize(value.`hasMore`) +
            FfiConverterString.allocationSize(value.`updatedAt`) +
            FfiConverterSequenceTypeConversation.allocationSize(value.`items`)
    )

    override fun write(value: ListConversationResult, buf: ByteBuffer) {
            FfiConverterBoolean.write(value.`hasMore`, buf)
            FfiConverterString.write(value.`updatedAt`, buf)
            FfiConverterSequenceTypeConversation.write(value.`items`, buf)
    }
}




data class ListUserResult (
    var `hasMore`: Boolean, 
    var `updatedAt`: String, 
    var `items`: List<User>, 
    var `removed`: List<String>
) {
    
}

public object FfiConverterTypeListUserResult: FfiConverterRustBuffer<ListUserResult> {
    override fun read(buf: ByteBuffer): ListUserResult {
        return ListUserResult(
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterSequenceTypeUser.read(buf),
            FfiConverterSequenceString.read(buf),
        )
    }

    override fun allocationSize(value: ListUserResult) = (
            FfiConverterBoolean.allocationSize(value.`hasMore`) +
            FfiConverterString.allocationSize(value.`updatedAt`) +
            FfiConverterSequenceTypeUser.allocationSize(value.`items`) +
            FfiConverterSequenceString.allocationSize(value.`removed`)
    )

    override fun write(value: ListUserResult, buf: ByteBuffer) {
            FfiConverterBoolean.write(value.`hasMore`, buf)
            FfiConverterString.write(value.`updatedAt`, buf)
            FfiConverterSequenceTypeUser.write(value.`items`, buf)
            FfiConverterSequenceString.write(value.`removed`, buf)
    }
}




data class Topic (
    var `id`: String, 
    var `name`: String, 
    var `icon`: String, 
    var `remark`: String, 
    var `ownerId`: String, 
    var `attendeeId`: String, 
    var `admins`: List<String>, 
    var `members`: UInt, 
    var `lastSeq`: ULong, 
    var `multiple`: Boolean, 
    var `source`: String, 
    var `private`: Boolean, 
    var `createdAt`: String, 
    var `updatedAt`: String, 
    var `notice`: TopicNotice?, 
    var `silent`: Boolean, 
    var `unread`: UInt, 
    var `cachedAt`: String
) {
    
}

public object FfiConverterTypeTopic: FfiConverterRustBuffer<Topic> {
    override fun read(buf: ByteBuffer): Topic {
        return Topic(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalTypeTopicNotice.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: Topic) = (
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterString.allocationSize(value.`icon`) +
            FfiConverterString.allocationSize(value.`remark`) +
            FfiConverterString.allocationSize(value.`ownerId`) +
            FfiConverterString.allocationSize(value.`attendeeId`) +
            FfiConverterSequenceString.allocationSize(value.`admins`) +
            FfiConverterUInt.allocationSize(value.`members`) +
            FfiConverterULong.allocationSize(value.`lastSeq`) +
            FfiConverterBoolean.allocationSize(value.`multiple`) +
            FfiConverterString.allocationSize(value.`source`) +
            FfiConverterBoolean.allocationSize(value.`private`) +
            FfiConverterString.allocationSize(value.`createdAt`) +
            FfiConverterString.allocationSize(value.`updatedAt`) +
            FfiConverterOptionalTypeTopicNotice.allocationSize(value.`notice`) +
            FfiConverterBoolean.allocationSize(value.`silent`) +
            FfiConverterUInt.allocationSize(value.`unread`) +
            FfiConverterString.allocationSize(value.`cachedAt`)
    )

    override fun write(value: Topic, buf: ByteBuffer) {
            FfiConverterString.write(value.`id`, buf)
            FfiConverterString.write(value.`name`, buf)
            FfiConverterString.write(value.`icon`, buf)
            FfiConverterString.write(value.`remark`, buf)
            FfiConverterString.write(value.`ownerId`, buf)
            FfiConverterString.write(value.`attendeeId`, buf)
            FfiConverterSequenceString.write(value.`admins`, buf)
            FfiConverterUInt.write(value.`members`, buf)
            FfiConverterULong.write(value.`lastSeq`, buf)
            FfiConverterBoolean.write(value.`multiple`, buf)
            FfiConverterString.write(value.`source`, buf)
            FfiConverterBoolean.write(value.`private`, buf)
            FfiConverterString.write(value.`createdAt`, buf)
            FfiConverterString.write(value.`updatedAt`, buf)
            FfiConverterOptionalTypeTopicNotice.write(value.`notice`, buf)
            FfiConverterBoolean.write(value.`silent`, buf)
            FfiConverterUInt.write(value.`unread`, buf)
            FfiConverterString.write(value.`cachedAt`, buf)
    }
}




data class TopicKnock (
    var `createdAt`: String, 
    var `updatedAt`: String, 
    var `topicId`: String, 
    var `userId`: String, 
    var `message`: String, 
    var `source`: String, 
    var `status`: String, 
    var `adminId`: String
) {
    
}

public object FfiConverterTypeTopicKnock: FfiConverterRustBuffer<TopicKnock> {
    override fun read(buf: ByteBuffer): TopicKnock {
        return TopicKnock(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: TopicKnock) = (
            FfiConverterString.allocationSize(value.`createdAt`) +
            FfiConverterString.allocationSize(value.`updatedAt`) +
            FfiConverterString.allocationSize(value.`topicId`) +
            FfiConverterString.allocationSize(value.`userId`) +
            FfiConverterString.allocationSize(value.`message`) +
            FfiConverterString.allocationSize(value.`source`) +
            FfiConverterString.allocationSize(value.`status`) +
            FfiConverterString.allocationSize(value.`adminId`)
    )

    override fun write(value: TopicKnock, buf: ByteBuffer) {
            FfiConverterString.write(value.`createdAt`, buf)
            FfiConverterString.write(value.`updatedAt`, buf)
            FfiConverterString.write(value.`topicId`, buf)
            FfiConverterString.write(value.`userId`, buf)
            FfiConverterString.write(value.`message`, buf)
            FfiConverterString.write(value.`source`, buf)
            FfiConverterString.write(value.`status`, buf)
            FfiConverterString.write(value.`adminId`, buf)
    }
}




data class TopicMember (
    var `topicId`: String, 
    var `userId`: String, 
    var `isOwner`: Boolean, 
    var `isAdmin`: Boolean, 
    var `remark`: String, 
    var `silent`: Boolean, 
    var `joinedAt`: String, 
    var `cachedAt`: String
) {
    
}

public object FfiConverterTypeTopicMember: FfiConverterRustBuffer<TopicMember> {
    override fun read(buf: ByteBuffer): TopicMember {
        return TopicMember(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: TopicMember) = (
            FfiConverterString.allocationSize(value.`topicId`) +
            FfiConverterString.allocationSize(value.`userId`) +
            FfiConverterBoolean.allocationSize(value.`isOwner`) +
            FfiConverterBoolean.allocationSize(value.`isAdmin`) +
            FfiConverterString.allocationSize(value.`remark`) +
            FfiConverterBoolean.allocationSize(value.`silent`) +
            FfiConverterString.allocationSize(value.`joinedAt`) +
            FfiConverterString.allocationSize(value.`cachedAt`)
    )

    override fun write(value: TopicMember, buf: ByteBuffer) {
            FfiConverterString.write(value.`topicId`, buf)
            FfiConverterString.write(value.`userId`, buf)
            FfiConverterBoolean.write(value.`isOwner`, buf)
            FfiConverterBoolean.write(value.`isAdmin`, buf)
            FfiConverterString.write(value.`remark`, buf)
            FfiConverterBoolean.write(value.`silent`, buf)
            FfiConverterString.write(value.`joinedAt`, buf)
            FfiConverterString.write(value.`cachedAt`, buf)
    }
}




data class TopicNotice (
    var `text`: String, 
    var `publisher`: String, 
    var `updatedAt`: String
) {
    
}

public object FfiConverterTypeTopicNotice: FfiConverterRustBuffer<TopicNotice> {
    override fun read(buf: ByteBuffer): TopicNotice {
        return TopicNotice(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: TopicNotice) = (
            FfiConverterString.allocationSize(value.`text`) +
            FfiConverterString.allocationSize(value.`publisher`) +
            FfiConverterString.allocationSize(value.`updatedAt`)
    )

    override fun write(value: TopicNotice, buf: ByteBuffer) {
            FfiConverterString.write(value.`text`, buf)
            FfiConverterString.write(value.`publisher`, buf)
            FfiConverterString.write(value.`updatedAt`, buf)
    }
}




data class User (
    var `userId`: String, 
    var `name`: String, 
    var `avatar`: String, 
    var `publicKey`: String, 
    var `remark`: String, 
    var `isContact`: Boolean, 
    var `isStar`: Boolean, 
    var `isBlocked`: Boolean, 
    var `locale`: String, 
    var `city`: String, 
    var `country`: String, 
    var `source`: String, 
    var `gender`: String, 
    var `createdAt`: String, 
    var `cachedAt`: String
) {
    
}

public object FfiConverterTypeUser: FfiConverterRustBuffer<User> {
    override fun read(buf: ByteBuffer): User {
        return User(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: User) = (
            FfiConverterString.allocationSize(value.`userId`) +
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterString.allocationSize(value.`avatar`) +
            FfiConverterString.allocationSize(value.`publicKey`) +
            FfiConverterString.allocationSize(value.`remark`) +
            FfiConverterBoolean.allocationSize(value.`isContact`) +
            FfiConverterBoolean.allocationSize(value.`isStar`) +
            FfiConverterBoolean.allocationSize(value.`isBlocked`) +
            FfiConverterString.allocationSize(value.`locale`) +
            FfiConverterString.allocationSize(value.`city`) +
            FfiConverterString.allocationSize(value.`country`) +
            FfiConverterString.allocationSize(value.`source`) +
            FfiConverterString.allocationSize(value.`gender`) +
            FfiConverterString.allocationSize(value.`createdAt`) +
            FfiConverterString.allocationSize(value.`cachedAt`)
    )

    override fun write(value: User, buf: ByteBuffer) {
            FfiConverterString.write(value.`userId`, buf)
            FfiConverterString.write(value.`name`, buf)
            FfiConverterString.write(value.`avatar`, buf)
            FfiConverterString.write(value.`publicKey`, buf)
            FfiConverterString.write(value.`remark`, buf)
            FfiConverterBoolean.write(value.`isContact`, buf)
            FfiConverterBoolean.write(value.`isStar`, buf)
            FfiConverterBoolean.write(value.`isBlocked`, buf)
            FfiConverterString.write(value.`locale`, buf)
            FfiConverterString.write(value.`city`, buf)
            FfiConverterString.write(value.`country`, buf)
            FfiConverterString.write(value.`source`, buf)
            FfiConverterString.write(value.`gender`, buf)
            FfiConverterString.write(value.`createdAt`, buf)
            FfiConverterString.write(value.`cachedAt`, buf)
    }
}





sealed class ClientException(message: String): Exception(message) {
        // Each variant is a nested class
        // Flat enums carries a string error message, so no special implementation is necessary.
        class InvalidPassword(message: String) : ClientException(message)
        class TokenExpired(message: String) : ClientException(message)
        class NetworkBroken(message: String) : ClientException(message)
        class TopicNotFound(message: String) : ClientException(message)
        class TopicKnockNotFound(message: String) : ClientException(message)
        class ChatLogNotFound(message: String) : ClientException(message)
        class InvalidContent(message: String) : ClientException(message)
        class ConversationNotFound(message: String) : ClientException(message)
        class UserNotFound(message: String) : ClientException(message)
        class KickOffByOtherClient(message: String) : ClientException(message)
        class DbMigrateException(message: String) : ClientException(message)
        class DbPoolException(message: String) : ClientException(message)
        class DbException(message: String) : ClientException(message)
        class StdException(message: String) : ClientException(message)
        class WebsocketException(message: String) : ClientException(message)
        class HttpException(message: String) : ClientException(message)
        class JsonException(message: String) : ClientException(message)
        class SendCtrlMessageException(message: String) : ClientException(message)
        class UnknownException(message: String) : ClientException(message)
        

    companion object ErrorHandler : CallStatusErrorHandler<ClientException> {
        override fun lift(error_buf: RustBuffer.ByValue): ClientException = FfiConverterTypeClientError.lift(error_buf)
    }
}

public object FfiConverterTypeClientError : FfiConverterRustBuffer<ClientException> {
    override fun read(buf: ByteBuffer): ClientException {
        
            return when(buf.getInt()) {
            1 -> ClientException.InvalidPassword(FfiConverterString.read(buf))
            2 -> ClientException.TokenExpired(FfiConverterString.read(buf))
            3 -> ClientException.NetworkBroken(FfiConverterString.read(buf))
            4 -> ClientException.TopicNotFound(FfiConverterString.read(buf))
            5 -> ClientException.TopicKnockNotFound(FfiConverterString.read(buf))
            6 -> ClientException.ChatLogNotFound(FfiConverterString.read(buf))
            7 -> ClientException.InvalidContent(FfiConverterString.read(buf))
            8 -> ClientException.ConversationNotFound(FfiConverterString.read(buf))
            9 -> ClientException.UserNotFound(FfiConverterString.read(buf))
            10 -> ClientException.KickOffByOtherClient(FfiConverterString.read(buf))
            11 -> ClientException.DbMigrateException(FfiConverterString.read(buf))
            12 -> ClientException.DbPoolException(FfiConverterString.read(buf))
            13 -> ClientException.DbException(FfiConverterString.read(buf))
            14 -> ClientException.StdException(FfiConverterString.read(buf))
            15 -> ClientException.WebsocketException(FfiConverterString.read(buf))
            16 -> ClientException.HttpException(FfiConverterString.read(buf))
            17 -> ClientException.JsonException(FfiConverterString.read(buf))
            18 -> ClientException.SendCtrlMessageException(FfiConverterString.read(buf))
            19 -> ClientException.UnknownException(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: ClientException): Int {
        return 4
    }

    override fun write(value: ClientException, buf: ByteBuffer) {
        when(value) {
            is ClientException.InvalidPassword -> {
                buf.putInt(1)
                Unit
            }
            is ClientException.TokenExpired -> {
                buf.putInt(2)
                Unit
            }
            is ClientException.NetworkBroken -> {
                buf.putInt(3)
                Unit
            }
            is ClientException.TopicNotFound -> {
                buf.putInt(4)
                Unit
            }
            is ClientException.TopicKnockNotFound -> {
                buf.putInt(5)
                Unit
            }
            is ClientException.ChatLogNotFound -> {
                buf.putInt(6)
                Unit
            }
            is ClientException.InvalidContent -> {
                buf.putInt(7)
                Unit
            }
            is ClientException.ConversationNotFound -> {
                buf.putInt(8)
                Unit
            }
            is ClientException.UserNotFound -> {
                buf.putInt(9)
                Unit
            }
            is ClientException.KickOffByOtherClient -> {
                buf.putInt(10)
                Unit
            }
            is ClientException.DbMigrateException -> {
                buf.putInt(11)
                Unit
            }
            is ClientException.DbPoolException -> {
                buf.putInt(12)
                Unit
            }
            is ClientException.DbException -> {
                buf.putInt(13)
                Unit
            }
            is ClientException.StdException -> {
                buf.putInt(14)
                Unit
            }
            is ClientException.WebsocketException -> {
                buf.putInt(15)
                Unit
            }
            is ClientException.HttpException -> {
                buf.putInt(16)
                Unit
            }
            is ClientException.JsonException -> {
                buf.putInt(17)
                Unit
            }
            is ClientException.SendCtrlMessageException -> {
                buf.putInt(18)
                Unit
            }
            is ClientException.UnknownException -> {
                buf.putInt(19)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




enum class NetworkState {
    CONNECTING,CONNECTED,DISCONNECTED;
}

public object FfiConverterTypeNetworkState: FfiConverterRustBuffer<NetworkState> {
    override fun read(buf: ByteBuffer) = try {
        NetworkState.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: NetworkState) = 4

    override fun write(value: NetworkState, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






internal typealias Handle = Long
internal class ConcurrentHandleMap<T>(
    private val leftMap: MutableMap<Handle, T> = mutableMapOf(),
    private val rightMap: MutableMap<T, Handle> = mutableMapOf()
) {
    private val lock = java.util.concurrent.locks.ReentrantLock()
    private val currentHandle = AtomicLong(0L)
    private val stride = 1L

    fun insert(obj: T): Handle =
        lock.withLock {
            rightMap[obj] ?:
                currentHandle.getAndAdd(stride)
                    .also { handle ->
                        leftMap[handle] = obj
                        rightMap[obj] = handle
                    }
            }

    fun get(handle: Handle) = lock.withLock {
        leftMap[handle]
    }

    fun delete(handle: Handle) {
        this.remove(handle)
    }

    fun remove(handle: Handle): T? =
        lock.withLock {
            leftMap.remove(handle)?.let { obj ->
                rightMap.remove(obj)
                obj
            }
        }
}

interface ForeignCallback : com.sun.jna.Callback {
    public fun invoke(handle: Handle, method: Int, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0
// Callback return codes
internal const val UNIFFI_CALLBACK_SUCCESS = 0
internal const val UNIFFI_CALLBACK_ERROR = 1
internal const val UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

public abstract class FfiConverterCallbackInterface<CallbackInterface>(
    protected val foreignCallback: ForeignCallback
): FfiConverter<CallbackInterface, Handle> {
    private val handleMap = ConcurrentHandleMap<CallbackInterface>()

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal abstract fun register(lib: _UniFFILib)

    fun drop(handle: Handle): RustBuffer.ByValue {
        return handleMap.remove(handle).let { RustBuffer.ByValue() }
    }

    override fun lift(value: Handle): CallbackInterface {
        return handleMap.get(value) ?: throw InternalException("No callback in handlemap; this is a Uniffi bug")
    }

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) =
        handleMap.insert(value).also {
            assert(handleMap.get(it) === value) { "Handle map is not returning the object we just placed there. This is a bug in the HandleMap." }
        }

    override fun allocationSize(value: CallbackInterface) = 8

    override fun write(value: CallbackInterface, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}

// Declaration and FfiConverters for Callback Callback Interface

public interface Callback {
    fun `onConnected`()
    fun `onConnecting`()
    fun `onNetBroken`(`reason`: String)
    fun `onKickoffByOtherClient`(`reason`: String)
    fun `onSendMessageFail`(`topicId`: String, `chatId`: String, `code`: UInt)
    fun `onTopicKnock`(`topicId`: String, `message`: String, `source`: String)
    fun `onTopicKnockReject`(`userId`: String, `message`: String)
    fun `onTopicJoin`(`topicId`: String)
    fun `onRead`(`topicId`: String)
    fun `onRecall`(`topicId`: String, `chatId`: String)
    fun `onTyping`(`topicId`: String, `userId`: String)
    fun `onTopicMessage`(`topicId`: String, `message`: ChatLog)
    fun `onTopicNoticeUpdated`(`topicId`: String, `notice`: TopicNotice)
    fun `onTopicMemberUpdated`(`topicId`: String, `member`: User, `isAdd`: Boolean)
    fun `onConversationUpdated`(`conversations`: List<Conversation>)
    fun `onConversationRemoved`(`topicId`: String)
    fun `onTopicKickoff`(`topicId`: String, `adminId`: String, `userId`: String)
    fun `onTopicDismissed`(`topicId`: String, `userId`: String)
    fun `onTopicSilent`(`topicId`: String, `duration`: String)
    fun `onTopicSilentMember`(`topicId`: String, `userId`: String, `duration`: String)
    fun `onDownloadProgress`(`fileUrl`: String, `received`: UInt, `total`: UInt, `key`: String)
    fun `onDownloadDone`(`fileUrl`: String, `localFileName`: String, `size`: UInt, `key`: String)
    fun `onDownloadCancel`(`fileUrl`: String, `localFileName`: String, `reason`: String, `key`: String)
    fun `onUploadProgress`(`localFilePath`: String, `received`: UInt, `total`: UInt, `key`: String)
    fun `onUploadDone`(`url`: String, `localFilePath`: String, `size`: UInt, `key`: String)
    fun `onUploadCancel`(`url`: String, `localFilePath`: String, `reason`: String, `key`: String)
    
}

// The ForeignCallback that is passed to Rust.
internal class ForeignCallbackTypeCallback : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: Handle, method: Int, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeCallback.lift(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeCallback.drop(handle)
                // Successful return
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                UNIFFI_CALLBACK_SUCCESS
            }
            1 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnConnected`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            2 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnConnecting`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            3 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnNetBroken`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            4 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnKickoffByOtherClient`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            5 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnSendMessageFail`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            6 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnTopicKnock`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            7 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnTopicKnockReject`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            8 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnTopicJoin`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            9 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnRead`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            10 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnRecall`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            11 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnTyping`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            12 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnTopicMessage`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            13 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnTopicNoticeUpdated`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            14 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnTopicMemberUpdated`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            15 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnConversationUpdated`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            16 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnConversationRemoved`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            17 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnTopicKickoff`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            18 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnTopicDismissed`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            19 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnTopicSilent`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            20 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnTopicSilentMember`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            21 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnDownloadProgress`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            22 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnDownloadDone`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            23 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnDownloadCancel`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            24 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnUploadProgress`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            25 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnUploadDone`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            26 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnUploadCancel`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            
            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                try {
                    // Try to serialize the error into a string
                    outBuf.setValue(FfiConverterString.lower("Invalid Callback index"))
                } catch (e: Throwable) {
                    // If that fails, then it's time to give up and just return
                }
                UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        }
    }

    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnConnected`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        fun makeCall() : Int {
            kotlinCallbackInterface.`onConnected`(
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnConnecting`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        fun makeCall() : Int {
            kotlinCallbackInterface.`onConnecting`(
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnNetBroken`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onNetBroken`(
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnKickoffByOtherClient`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onKickoffByOtherClient`(
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnSendMessageFail`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onSendMessageFail`(
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf), 
                FfiConverterUInt.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnTopicKnock`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onTopicKnock`(
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnTopicKnockReject`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onTopicKnockReject`(
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnTopicJoin`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onTopicJoin`(
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnRead`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onRead`(
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnRecall`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onRecall`(
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnTyping`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onTyping`(
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnTopicMessage`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onTopicMessage`(
                FfiConverterString.read(argsBuf), 
                FfiConverterTypeChatLog.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnTopicNoticeUpdated`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onTopicNoticeUpdated`(
                FfiConverterString.read(argsBuf), 
                FfiConverterTypeTopicNotice.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnTopicMemberUpdated`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onTopicMemberUpdated`(
                FfiConverterString.read(argsBuf), 
                FfiConverterTypeUser.read(argsBuf), 
                FfiConverterBoolean.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnConversationUpdated`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onConversationUpdated`(
                FfiConverterSequenceTypeConversation.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnConversationRemoved`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onConversationRemoved`(
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnTopicKickoff`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onTopicKickoff`(
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnTopicDismissed`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onTopicDismissed`(
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnTopicSilent`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onTopicSilent`(
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnTopicSilentMember`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onTopicSilentMember`(
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnDownloadProgress`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onDownloadProgress`(
                FfiConverterString.read(argsBuf), 
                FfiConverterUInt.read(argsBuf), 
                FfiConverterUInt.read(argsBuf), 
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnDownloadDone`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onDownloadDone`(
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf), 
                FfiConverterUInt.read(argsBuf), 
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnDownloadCancel`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onDownloadCancel`(
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnUploadProgress`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onUploadProgress`(
                FfiConverterString.read(argsBuf), 
                FfiConverterUInt.read(argsBuf), 
                FfiConverterUInt.read(argsBuf), 
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnUploadDone`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onUploadDone`(
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf), 
                FfiConverterUInt.read(argsBuf), 
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnUploadCancel`(kotlinCallbackInterface: Callback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onUploadCancel`(
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
public object FfiConverterTypeCallback: FfiConverterCallbackInterface<Callback>(
    foreignCallback = ForeignCallbackTypeCallback()
) {
    override fun register(lib: _UniFFILib) {
        rustCall() { status ->
            lib.uniffi_client_fn_init_callback_callback(this.foreignCallback, status)
        }
    }
}






// Declaration and FfiConverters for Uploader Callback Interface

public interface Uploader {
    fun `upload`(`localFilePath`: String, `key`: String)
    fun `download`(`fileUrl`: String, `saveToLocal`: String, `key`: String)
    fun `cancelDownload`(`fileUrl`: String, `key`: String)
    fun `cancelUpload`(`localFilePath`: String, `key`: String)
    
}

// The ForeignCallback that is passed to Rust.
internal class ForeignCallbackTypeUploader : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: Handle, method: Int, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeUploader.lift(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeUploader.drop(handle)
                // Successful return
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                UNIFFI_CALLBACK_SUCCESS
            }
            1 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeUpload`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            2 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeDownload`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            3 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeCancelDownload`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            4 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeCancelUpload`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            
            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                try {
                    // Try to serialize the error into a string
                    outBuf.setValue(FfiConverterString.lower("Invalid Callback index"))
                } catch (e: Throwable) {
                    // If that fails, then it's time to give up and just return
                }
                UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        }
    }

    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeUpload`(kotlinCallbackInterface: Uploader, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`upload`(
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeDownload`(kotlinCallbackInterface: Uploader, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`download`(
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeCancelDownload`(kotlinCallbackInterface: Uploader, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`cancelDownload`(
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeCancelUpload`(kotlinCallbackInterface: Uploader, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`cancelUpload`(
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
public object FfiConverterTypeUploader: FfiConverterCallbackInterface<Uploader>(
    foreignCallback = ForeignCallbackTypeUploader()
) {
    override fun register(lib: _UniFFILib) {
        rustCall() { status ->
            lib.uniffi_client_fn_init_callback_uploader(this.foreignCallback, status)
        }
    }
}




public object FfiConverterOptionalString: FfiConverterRustBuffer<String?> {
    override fun read(buf: ByteBuffer): String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: String?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeAuthInfo: FfiConverterRustBuffer<AuthInfo?> {
    override fun read(buf: ByteBuffer): AuthInfo? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeAuthInfo.read(buf)
    }

    override fun allocationSize(value: AuthInfo?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeAuthInfo.allocationSize(value)
        }
    }

    override fun write(value: AuthInfo?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeAuthInfo.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeContent: FfiConverterRustBuffer<Content?> {
    override fun read(buf: ByteBuffer): Content? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeContent.read(buf)
    }

    override fun allocationSize(value: Content?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeContent.allocationSize(value)
        }
    }

    override fun write(value: Content?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeContent.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeTopicNotice: FfiConverterRustBuffer<TopicNotice?> {
    override fun read(buf: ByteBuffer): TopicNotice? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeTopicNotice.read(buf)
    }

    override fun allocationSize(value: TopicNotice?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeTopicNotice.allocationSize(value)
        }
    }

    override fun write(value: TopicNotice?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeTopicNotice.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeCallback: FfiConverterRustBuffer<Callback?> {
    override fun read(buf: ByteBuffer): Callback? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeCallback.read(buf)
    }

    override fun allocationSize(value: Callback?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeCallback.allocationSize(value)
        }
    }

    override fun write(value: Callback?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeCallback.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeUploader: FfiConverterRustBuffer<Uploader?> {
    override fun read(buf: ByteBuffer): Uploader? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeUploader.read(buf)
    }

    override fun allocationSize(value: Uploader?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeUploader.allocationSize(value)
        }
    }

    override fun write(value: Uploader?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeUploader.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceString: FfiConverterRustBuffer<List<String>?> {
    override fun read(buf: ByteBuffer): List<String>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceString.read(buf)
    }

    override fun allocationSize(value: List<String>?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterSequenceString.allocationSize(value)
        }
    }

    override fun write(value: List<String>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceString.write(value, buf)
        }
    }
}




public object FfiConverterSequenceString: FfiConverterRustBuffer<List<String>> {
    override fun read(buf: ByteBuffer): List<String> {
        val len = buf.getInt()
        return List<String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<String>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterString.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeChatLog: FfiConverterRustBuffer<List<ChatLog>> {
    override fun read(buf: ByteBuffer): List<ChatLog> {
        val len = buf.getInt()
        return List<ChatLog>(len) {
            FfiConverterTypeChatLog.read(buf)
        }
    }

    override fun allocationSize(value: List<ChatLog>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeChatLog.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<ChatLog>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeChatLog.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeConversation: FfiConverterRustBuffer<List<Conversation>> {
    override fun read(buf: ByteBuffer): List<Conversation> {
        val len = buf.getInt()
        return List<Conversation>(len) {
            FfiConverterTypeConversation.read(buf)
        }
    }

    override fun allocationSize(value: List<Conversation>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeConversation.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Conversation>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeConversation.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeTopicKnock: FfiConverterRustBuffer<List<TopicKnock>> {
    override fun read(buf: ByteBuffer): List<TopicKnock> {
        val len = buf.getInt()
        return List<TopicKnock>(len) {
            FfiConverterTypeTopicKnock.read(buf)
        }
    }

    override fun allocationSize(value: List<TopicKnock>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeTopicKnock.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<TopicKnock>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeTopicKnock.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeUser: FfiConverterRustBuffer<List<User>> {
    override fun read(buf: ByteBuffer): List<User> {
        val len = buf.getInt()
        return List<User>(len) {
            FfiConverterTypeUser.read(buf)
        }
    }

    override fun allocationSize(value: List<User>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeUser.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<User>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeUser.write(it, buf)
        }
    }
}

fun `initLog`(`level`: String, `isTest`: Boolean) =
    
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_func_init_log(FfiConverterString.lower(`level`),FfiConverterBoolean.lower(`isTest`),_status)
}



fun `getCurrentUser`(`root`: String): AuthInfo? {
    return FfiConverterOptionalTypeAuthInfo.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_func_get_current_user(FfiConverterString.lower(`root`),_status)
})
}

@Throws(ClientException::class)

fun `setCurrentUser`(`root`: String, `userId`: String) =
    
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_func_set_current_user(FfiConverterString.lower(`root`),FfiConverterString.lower(`userId`),_status)
}


@Throws(ClientException::class)

fun `login`(`endpoint`: String, `email`: String, `password`: String): AuthInfo {
    return FfiConverterTypeAuthInfo.lift(
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.uniffi_client_fn_func_login(FfiConverterString.lower(`endpoint`),FfiConverterString.lower(`email`),FfiConverterString.lower(`password`),_status)
})
}


